{
    "tactics": [
        {
            "ID": "TA0501",
            "name": "Initial Access",
            "short_description": "The adversary is attempting to gain unauthorised access to the UGV’s systems or networks.",
            "full_description": "Initial Access consists of techniques that adversaries use as entry vectors to establish a foothold within UGV systems or networks.\nEntry points targeted by adversaries include ground station, telematics units, infotainment systems, and wireless interfaces (Wi-Fi, Bluetooth, cellular or other custom connections). They may exploit vulnerabilities in manufacturer services, mobile applications, or cloud-based APIs that handle remote access and vehicle data. Physical interfaces, such as OBD-II ports, removable devices, and aftermarket dongles, can also be used as techniques to gain initial unauthorised access to the system.\nFootholds gained through initial access may enable additional attack tactics and techniques.\nThis tactic was adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5010", "T5015", "T5011", "T5008","T5017","T5002","T5014","T5003","T5016","T5007"]
        },
        {
            "ID": "TA0502",
            "name": "Execution",
            "short_description": "The adversary is trying to run malicious code or manipulate UGV's functions and data without authorisation.",
            "full_description": "Execution consists of techniques that allow adversary-controlled code to run on a vehicle’s service, network, control unit, application, firmware, or other asset.\nThese attacks may involve direct code injection, unauthorised commands, or malicious payloads delivered through network interfaces, firmware updates, or compromised software. \nAttackers can exploit communication protocols such as the Controller Area Network (CAN) and Unified Diagnostic Services (UDS) to inject malicious messages and manipulate vehicle behUGViour. They may also execute code on vulnerable telematics units, infotainment systems, OTA update services or mobile-connected services.\nAdditionally, adversaries can tamper with UGV sensor inputs, such as LiDAR, radar, and GPS, to disrupt perception systems and trigger unintended vehicle responses.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5024","T5019","T5020","T5027","T5028","T5023","T5022","T5025","T5021","T5018","T5026"]
        },
        {
            "ID": "TA0503",
            "name": "Persistence",
            "short_description": "The adversary attempts to maintain a foothold within the UGV’s systems.",
            "full_description": "Persistence consists of techniques that enable long-term access, allowing adversaries to execute future attacks or retain control over compromised components.\nAdversaries can achieve persistence through various means, such as malicious OTA updates, unauthorised firmware modifications, or backdoors in telematics units and ECUs. These backdoors may remain active even after system reboots.\nFor example, attackers may tamper with firmware integrity mechanisms like Secure Boot to prevent recovery or install persistent malware in infotainment or telematics systems. This allows them to conduct long-term surveillance, execute unauthorised commands, and move laterally across the vehicle network.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5029","T5031","T5033","T5032","T5036"]
        },
        {
            "ID": "TA0504",
            "name": "Privilege Escalation",
            "short_description": "The adversary is attempting to obtain elevated permissions within the UGV’s systems.",
            "full_description": "Privilege escalation consists of techniques that allow adversaries to gain higher-level access within an UGV system or network. With elevated privileges, they can execute administrative commands, control vehicle components, and disable security measures.\nAdversaries often start with limited access and escalate their privileges by exploiting system weaknesses, misconfigurations, or vulnerabilities.\nExamples of elevated access include: User accounts with extended permissions, root level of infotainment system, root level of telematic system, root level of central gateway system. Once attackers gain administrative access, they can run arbitrary commands, alter vehicle firmware, and disable security features to enable further attacks.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5039","T5040","T5038"]
        },
        {
            "ID": "TA0505",
            "name": "Defense Evasion",
            "short_description": "The adversary is trying to bypass or disable the UGV's security measures.",
            "full_description": "Defense evasion consists of techniques adversaries use to disable or bypass security mechanisms within an UGV system. Unlike traditional ATT&CK approaches that focus on UGVoiding detection, these methods allow attackers to directly neutralize security controls. This enables them to execute malicious code, advance their attacks, or manipulate the system without interference.\nCommon techniques include:\n\t- Disabling or bypassing security mechanisms in the telematics system to maintain access.\n\t- Exploiting software update processes and code integrity checks to insert malicious code undetected.\n\t- Disabling vehicle IDS to evade monitoring and alerts.\n\t- Bypassing security controls in diagnostic functions to perform unauthorised operations.\nThis tactic is adapted from AUTO-ISAC ATM.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5041","T5044","T5042","T5043"]
        },
        {
            "ID": "TA0506",
            "name": "Credential Access",
            "short_description": "The adversary is trying to steal UGV authentication credentials, such as passwords, access tokens, or cryptographic keys.",
            "full_description": "Credential access consists of techniques such as compromising mobile apps or wireless network to steal authentication credentials, exploiting vulnerabilities in keyless entry systems to gain unauthorised vehicle access, and intercepting communication to obtain session tokens or API keys. These methods enable attackers to bypass security controls, execute unauthorised actions, and further infiltrate the system.\nCommon credential access techniques may include:\n\t- Compromising mobile apps or wireless network to intercept authentication credentials like tokens, passwords, and keys.\n\t- Exploiting vulnerabilities in key fob systems or remote keyless entry (RKE) to gain unauthorised access.\n\t- Targeting mobile apps or infotainment systems to steal sensitive information like vehicle identification numbers (VINs).\n\t- Intercepting vehicle-to-cloud communications to obtain session tokens or API keys that enable backend system access.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5048","T5045","T5047","T5046","T5049"]
        },
		{
            "ID": "TA0507",
            "name": "Discovery",
            "short_description": "The adversary is trying to understand the vehicle network and environment.",
            "full_description": "Discovery consists of techniques for exploring a vehicle's network, interfaces, and communication protocols to identify vulnerable components within the autonomous vehicle.\nThrough analysing system structures, scanning networks, and probing interfaces, adversaries can map attack surfaces and find exploitable vulnerabilities.\nCommon discovery techniques include intercepting and analysing network traffic or CAN messages to understand vehicle communication structures, scanning and mapping internal vehicle networks to identify vulnerabilities and access points, and exploring interfaces like OBD-II ports, telematics systems, and sensors to find misconfigurations or security weaknesses.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5052","T5037","T5050","T5051"]
        },
        {
            "ID": "TA0508",
            "name": "Lateral Movement",
            "short_description": "The adversary is trying to move through the UGV’s network or systems.",
            "full_description": "Lateral movement consists of techniques that allow adversaries to traverse the vehicle’s internal network, pivot between components to access additional resources and escalate their attack. \nBy exploiting vulnerabilities, leveraging trusted communication channels, remote services or uploading malicious tools, attackers can extend their control and compromise additional vehicle functions.\nCommon lateral movement techniques include: moving from infotainment or telematics systems to other ECUs to control critical functions (via SSH, Telnet, direct connections, or shared CAN buses); transitioning from non-critical to critical CAN buses to access safety-critical components through diagnostic functions; and uploading tools to the head unit for exploitation, control, and automated spreading across connected vehicles through cellular networks.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5076","T5054","T5053","T5055"]
        },
        {
            "ID": "TA0509",
            "name": "Collection",
            "short_description": "The adversary is collecting data of interest from the UGV’s systems or environment.",
            "full_description": "Collection consists of techniques used to capture, extract, and analyse data from vehicle networks, internal systems, and external interfaces. By obtaining critical information, attackers can gain insights into vehicle operations, exfiltrate data, and plan further exploits.\nCommon data sources include CAN bus messages, important UGV files like VIN numbers and system logs, and vehicle data such as location, camera images, phone calls, software/firmware versions, and real-time status.\nAdversaries typically collect data through network sniffing, exploiting web service vulnerabilities, or directly accessing local vehicle systems. \nThis tactic is adapted from AUTO-ISAC ATM.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5057","T5059","T5056", "T5071","T5058"]
        },
        {
            "ID": "TA0510",
            "name": "Command and Control",
            "short_description": "The adversary is trying to communicate with compromised UGV systems to control them.",
            "full_description": "Command and control consists of techniques that adversaries use to maintain communication (typically remote) and issue malicious commands to vehicles. By establishing covert communication channels, attackers can manipulate UGV functions, steal data, or launch additional attacks while UGVoiding detection.\nCommon command and control techniques include using removable devices, modifying firmware, establishing reverse shells, or installing malicious applications to gain and maintain long-term remote control over compromised UGV systems.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5062","T5060","T5061"]
        },
		{
            "ID": "TA0511",
            "name": "Impair Process Control",
            "short_description": "The adversary is trying to manipulate, disable, or damage physical control processes within UGV.",
            "full_description": "Impair Process Control consists of techniques that interfere with the vehicle's operational processes by altering control logic, modifying system parameters, or manipulating reporting mechanisms. These techniques can result in unsafe driving conditions, compromised safety features, or loss of vehicle control.\nCommon techniques for this tactic include replaying normal diagnostic responses to emulate a healthy airbag system, or injecting malicious code into the control program to corrupt vehicle stability and response.\nThis tactic is adapted from MITRE ATT&CK (ICS domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5064","T5063"]
        },
		{
            "ID": "TA0512",
            "name": "Inhibit Response Function",
            "short_description": "The adversary is trying to prevent safety, protection, and operator intervention functions from responding to a failure, hazard, or unsafe state.",
            "full_description": "Inhibit Response Function consists of techniques that interfere with a vehicle's ability to detect and respond to threats, manipulate safety mechanisms, and suppress critical alerts. Through blocking or altering response functions, attackers can create unsafe driving conditions, disable security features, and cause system failures.\nCommon techniques include suppressing anti-theft systems, spoofing emergency brake data, forcing unnecessary stops by creating false obstacles, and jamming radar and ultrasonic sensors. These actions prevent the vehicle from detecting real obstacles, which can lead to collisions or failure to respond to actual threats.\nThis tactic is adapted from MITRE ATT&CK (ICS domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5065","T5066"]
        },		
        {
            "ID": "TA0513",
            "name": "Exfiltration",
            "short_description": "The adversary is attempting to steal data from the UGV and transmit it externally.",
            "full_description": "Exfiltration refers to techniques that adversaries use to steal data from vehicles. After collecting data, adversaries typically package it using compression and encryption to UGVoid detection during removal.\nData can be exfiltrated manually or through automated processes using command and control channels or alternative pathways. Adversaries may exploit various vehicle connectivity features, such as mobile applications, telematics data loggers, cellular networks, Wi-Fi, or Bluetooth, to extract and transmit stolen information.\nThis tactic is adapted from MITRE ATT&CK (Enterprise domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5068","T5070","T5067"]
        },    
        {
            "ID": "TA0514",
            "name": "Impact",
            "short_description": "The adversary is attempting to manipulate, disrupt, or damage the UGV's systems or its operational environment.",
            "full_description": "Impact consists of techniques that degrade vehicle functionality, compromise safety, or exploit vulnerabilities at scale. Through malicious commands, system output manipulation, or disruption of essential operations, attackers can inflict physical harm, cause financial losses, and create widespread security breaches, threatening safety, security, and privacy.\nCommon impact techniques include forcing vehicles off-road, causing accidents, initiating emergency shutdowns, and impairing safe operation. Attackers may also steal sensitive vehicle data, including operational and security-critical information, or exploit vulnerabilities across identical vehicle models to launch large-scale attacks after breaching a single vehicle.\nThis tactic is adapted from MITRE ATT&CK (Enterprise and ICS domain).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "technique ID": ["T5004","T5078","T5081","T5069","T5077","T5073","T5075","T5074","T5079","T5072","T5006","T5005","T5080"]
        }
    ],
    "techniques": [
		{
            "ID": "T5002",
            "name": "Physical Access (new)",
            "short_description": "Adversaries may gain physical access to autonomous vehicles to enable further attacks or establish a foothold in the system.",
            "full_description": "Adversaries may begin their attack by obtaining physical access to the vehicle. This technique represents a crucial entry point, particularly for attacks requiring direct interaction with in-vehicle components such as the OBD-II port, exposed wiring, or internal ECUs. \n Physical access allows attackers to connect diagnostic tools, rogue devices, or removable media, enabling further compromise of the vehicle’s network and control systems. \n This method is especially relevant for unmanned ground vehicles, which may be more vulnerable due to their compact size, remote deployment, or lack of onboard supervision. \n In many real-world case studies, initial access was only possible after physical access was achieved, making it a foundational step for subsequent techniques under Initial Access, Persistence, or Execution tactics.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0009",
					"description": "Researchers need first physical access to the vehicle to connect an OBD device and laptop to access the internal network."
				},
				{
					"reference ID": "RE0016",
					"description": "Researchers need physical access to the vehicle to inject removable devices into the vehicle."
				},
				{
					"reference ID": "RE0034",
					"description": "Researchers need first physical access to the vehicle to connect a rogue device to the exposed wires to access the CAN network."
				}
            ],
            "reference ID": ["RE0009", "RE0016","RE0034"]
        },
		{
            "ID": "T5003",
            "name": "Supply Chain Compromise",
            "short_description": "Adversaries may manipulate products or product delivery mechanisms, such as software or hardware components during the supply chain lifecycle to gain access to or compromise vehicle systems.",
            "full_description": " AV are composed of numerous interconnected components sourced from multiple original equipment manufacturers (OEMs), tiered suppliers, and third-party vendors. Adversaries may target these components during manufacturing, integration, or distribution phases to implant malicious modifications before the vehicle reaches the end user. \n A compromise can occur at any stage of the supply chain, including: \n\t - Manipulation of software during development or integration by OEMs or suppliers \n\t - Injection of malicious code in firmware or update mechanisms \n\t - Replacement of legitimate hardware components with altered or counterfeit versions \n\t - Insertion of malware through factory-infected removable media \n\t - Modification of vehicle sensors or physical environment elements to deceive perception systems \n While this technique is harder to detect and defend against, it presents a high-impact risk. In the AV context, this may include the insertion of backdoors in control units, manipulation of camera or LIDAR drivers, or the pre-installation of vulnerable firmware. \n This technique often enables other tactics such as Execution, Persistence, or Initial Access once the compromised component is active within the vehicle.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [],
            "reference ID": ["RE0042"]
        },
		{
            "ID": "T5004",
            "name": "Adversarial Machine Learning (new)",
            "short_description": "Adversaries may try to use adversarial machine learning techniques to cause vehicle perception systems to misclassify objects, fail to detect obstacles, misinterpret road signs, respond inappropriately to road conditions, and others.",
            "full_description": "Adversarial Machine Learning (AML) attacks target machine learning models used in vehicle perception, security, and decision-making systems. By manipulating model outputs, these attacks can cause misclassification, system failure, or unsafe driving behavior. \n AML attacks on autonomous vehicles primarily affect sensor systems and intrusion detection systems (IDS). In sensor attacks, adversarial inputs trick machine learning models into misclassifying obstacles or detecting nonexistent ones, leading to navigation errors and safety risks. In IDS attacks, adversarial modifications to network data cause misclassification, making malicious traffic appear benign. \n The impact of these attacks is severe. A compromised perception system can lead to traffic accidents, navigation failures, or vehicle immobilization. Meanwhile, attacks on cybersecurity defenses can bypass anomaly detection, exposing critical vehicle components to further exploitation.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": ["T5004.001", "T5004.002"],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0025",
                    "description": "Reseachers using physical adversarial patches in the form of road decals to mislead object detection systems in autonomous vehicles, causing incorrect object recognition and disrupt AV navigation."
                },
				{
					"reference ID": "RE0019",
					"description": "Researchers demonstrated an adversarial sensor attack on LiDAR-based perception. The attack created false 'front-near obstacles' within five meters, causing incorrect driving decisions such as emergency braking or vehicle freezing at intersections. "
				},
				{
					"reference ID": "RE0027",
					"description": "Researchers tested adversarial attacks on ML-based IDS models, including Deep Neural Network (DNN), Decision Tree (DT), Random Forest (RF), Extra Trees (ET), and XGBoost. Findings indicate that these IDS models are highly susceptible to adversarial perturbations, leading to significant misclassification of network traffic."
				},
				{
					"reference ID": "RE0028",
					"description": "Researchers examined adversarial attacks on two IDS models: a Deep Neural Network (DNN) and a Multi-Tier Hybrid IDS (MTH-IDS). The adversarial messages altered only the data payload fields (D0–D7) while maintaining CAN IDs and DLC values unchanged. The study observed a high attack success rate, with up to 52.34% of normal frames being misclassified as malicious."
				}
            ],
            "reference ID": ["RE0019", "RE0020", "RE0025","RE0026","RE0027","RE0028"]
        },
		{
            "ID": "T5005",
            "name": "Sensor Manipulation (new)",
            "short_description": "Adversaries may manipulate vehicle sensors such as LIDAR, RADAR, ultrasonic, and GPS to create false object detection, distance readings, or positioning",
            "full_description": "Sensor manipulation attacks pose significant threats to vehicle perception systems. These attacks primarily target five key sensor types, such as Camera, LIDAR, RADAR, and SONAR, motion and position sensor. \n Adversaries may inject crafted or replayed signals into a vehicle’s sensor systems to create specific false outputs. These attacks mislead the perception system by spoofing sensor inputs, injecting false echoes, or replaying captured data. The goal is often to trick the system into detecting phantom obstacles, incorrect distances, or altered positions. \n While these attacks can severely impact a vehicle's perception and navigation capabilities, their effects typically remain isolated to the perception layer without directly compromising deeper vehicle systems, unless these manipulated inputs lead to incorrect decisions at higher processing levels. \n It is important to distinguish Sensor Manipulation from Adversarial Attacks and Sensor Interference. Adversarial Attacks also target perception systems like LIDAR or Camera but focus on exploiting AI-based algorithms rather than manipulating sensor signals. They deceive machine learning models using crafted inputs, such as perturbing images to mislead object classification. In contrast, Sensor Interference disrupts the sensor's ability to function correctly by overwhelming or blocking signals, such as through jamming, blinding, or physical obstruction, without injecting false data.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": ["T5005.001", "T5005.002", "T5005.003", "T5005.004"],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0017",
                    "description": "LIDAR Replay Attack - Researchers intercept and retransmit LiDAR pulses from a different location, creating false reflections at unintended positions."
                },
				{
                    "reference ID": "RE0021",
                    "description": "Ultrasonic Spoofing attack - Researchers injects synthetic ultrasonic signals with modified frequency modulation patterns to create false object detections or alter measured distances."
                },
				{
                    "reference ID": "RE0021",
                    "description": "Millimeter-Wave Radar Spoofing attack - Researchers injects synthetic radar signals with altered frequency modulation patterns, tricking the radar into detecting false objects or incorrect distances."
                },
				{
                    "reference ID": "RE0015",
                    "description": "Researchers injected false inertial sensor readings during flight, causing incorrect roll estimation and crash of the quadrotor."
                }
            ],
            "reference ID": ["RE0015","RE0017","RE0021"]
        },
		{
            "ID": "T5006",
            "name": "Sensor Interference (new)",
            "short_description": "Adversaries may interfere with vehicle sensors by jamming, blinding, or physically blocking signals to degrade their accuracy or disable them.",
            "full_description": "Sensor interference attacks disrupt perception sensors by overwhelming, blinding, or physically obstructing them. These attacks cause confusion, signal loss, or degraded readings through methods like laser blinding, radar jamming, or acoustic interference. \n By distorting sensor inputs, adversaries can disrupt object detection, mislead distance measurements, or create phantom obstacles. \n While these attacks can severely impact a vehicle's perception and navigation capabilities, their effects typically remain isolated to the perception layer. They don't directly compromise deeper vehicle systems. \n This technique differs from Sensor Manipulation and Adversarial Attacks. Sensor Interference focuses on degrading or disabling sensor functionality through physical or electromagnetic disruption (jamming, blinding, or blocking) without injecting false signals. In contrast, Sensor Manipulation actively feeds false data to create misleading outputs, while Adversarial Attacks exploit AI-based perception algorithms using crafted inputs to deceive object recognition or classification models.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": ["T5006.001", "T5006.002", "T5006.003"],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0017",
                    "description": "CAMERA Confusing Attack - Researchers use rapid bursts of light to force the camera to continuously adjust exposure settings, creating time lag in the auto-adjustment process and causing missed object detection."
                },
				{
                    "reference ID": "RE0021",
                    "description": "CAMERA Binding Attack - Researchers uses three different light sources to temporarily or permanently blind the vehicle’s camera, obstructing recognition of lane markings, traffic signs, and obstacles."
                },
				{
                    "reference ID": "RE0018",
                    "description": "Ultrasonic Blinding attack - Researchers disrupting sensor accuracy by covering sensors or using thin objects or acoustic materials."
                },
				{
                    "reference ID": "RE0021",
                    "description": "Millimeter-Wave Radar Jamming attack - Researchers transmit high-power electromagnetic signals to interfere with the vehicle’s radar system, preventing accurate object detection."
                }
            ],
            "reference ID": ["RE0017", "RE0018", "RE0021"]
        },
		{
            "ID": "T5007",
            "name": "Wireless Compromise",
            "short_description": "Adversaries may exploit wireless communication channels to gain unauthorised access to an autonomous vehicle's network and systems. Wireless compromise can occur through the manipulation or emulation of wireless infrastructure such as cellular base stations, Wi-Fi access points, or short-range communication modules.",
            "full_description": "Wireless compromise refers to an adversary’s use of wireless communication vectors, such as cellular, Wi-Fi, Bluetooth, or other short- and long-range protocols, to establish unauthorised access to autonomous vehicle systems. This can serve as a gateway for more complex attacks that manipulate internal ECUs and applications, compromise firmware, or inject malicious commands over in-vehicle networks. \n By exploiting these interfaces, adversaries can bypass perimeter security, perform man-in-the-middle  attacks, downgrade connections to insecure protocols, or jam communication channels. Sub-techniques include the use of rogue cellular base stations, rogue Wi-Fi access points, downgrade attacks, and jamming or denial-of-service attack. \n Although other wireless-based attacks like sensor manipulation or remote keyless entry spoofing also involve wireless exploitation, they often target isolated functions and do not typically provide access deeper into the AV system or network. In contrast, wireless compromise techniques under this category are characterised by their ability to create an initial foothold that enables further attack stages, including execution of additional techniques or transition to new tactics such as lateral movement, command injection, or persistence.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": ["T5007.001", "T5007.002", "T5007.003", "T5007.004", "T5007.005"],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0013",
                    "description": "Researchers used a rogue GSM base station to intercept TCP messages and escalate access to BMW’s NBT Head Unit and Telematic Communication Box (TCB)."
                },
				{
                    "reference ID": "RE0011",
                    "description": "Researchers spoofed Tesla Guest Wi-Fi, a trusted network used by Tesla body shops and superchargers, to trick vehicles into auto-connecting. By redirecting browser traffic, they found out the vulnerabilities in QtCarBrowser."
                },
				{
                    "reference ID": "RE0023",
                    "description": "Researchers downgraded a vehicle’s T-Box from LTE to GSM using a rogue base station (USRP + OpenBTS), enabling them to intercept GSM text messages."
                },
				{
                    "reference ID": "RE0024",
                    "description": "Researchers sends deauthentication frames to disconnect the Tesla from its Wi-Fi network"
                }
            ],
            "reference ID": ["RE0011","RE0012","RE0013","RE0014","RE0023","RE0024"]
        },
		{
            "ID": "T5008",
            "name": "Hardware Additions",
            "short_description": "Adversaries may physically attach malicious hardware components to a vehicle's interface ports or wiring to gain access, inject commands, or establish a foothold for further exploitation.",
			"full_description": "Adversaries may introduce rogue or modified hardware devices into a vehicle's internal network via diagnostic ports (e.g., OBD-II), exposed wiring, or aftermarket modules. Unlike simple payload delivery via removable media, hardware additions provide persistent and versatile access that can enable deeper attacks. \n Such devices may include custom development boards, commercial diagnostic tools, CAN injectors, or wireless-enabled components. These hardware additions can serve various purposes, ranging from injecting malicious CAN messages and intercepting communications to bridging connectivity with external controllers (e.g., mobile apps or remote command servers). \n This technique differs from basic replication through removable media by offering expanded functionality and long-term access. A successful hardware addition can open new capabilities for the attacker, enabling lateral movement, manipulation of ECU behaviour, persistent backdoors, or launching additional techniques from within the vehicle’s internal systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0009",
					"description": "Researchers connected a laptop and an Atmel AT90CAN128 development board (Olimex AVR-CAN) with custom firmware to the OBD-II port, allowing them to inject malicious CAN packets into the vehicle network."
				},
				{
					"reference ID": "RE0016",
					"description": "Researchers used Vector CANoe and a diagnostic tester connected via the OBD-II port to inject crafted CAN messages."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers connected a PassThru device to the OBD-II port, allowing them to reprogram and diagnostic the vehicle."
				},
				{
					"reference ID": "RE0034",
					"description": "Researchers connected a rogue device, referred to as a CAN Injector, to exposed headlight wiring, allowing them to inject malicious messages directly into the CAN bus and mimic key fob authentication."
				},
				{
					"reference ID": "RE0035",
					"description": "Researchers analyzed 77 wireless OBD-II dongles that connect directly to vehicle internal networks and communicate wirelessly with external apps or services, enabling vehicle control and in-vehicle network infiltration."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers installed an OBD-II scan tool on the vehicle that communicated with a malicious mobile application. This enabled remote diagnostics and injection of malicious messages via the scan tool interface."
				}				
            ],
            "reference ID": ["RE0009", "RE0016", "RE0010", "RE0022", "RE0034", "RE0035"]
        },
		{
            "ID": "T5010",
            "name": "Equipment Hijacking (new)",
            "short_description": "Adversaries may physically hijack a UGV to gain initial access and establish control over its systems, enabling further exploitation or manipulation.",
            "full_description": "Due to their compact size and often limited physical security, Unmanned Ground Vehicles (UGVs) can be physically hijacked by adversaries in the field. In contrast to larger or stationary systems, UGVs are more susceptible to physical takeover, especially in scenarios where they operate in unmonitored or vulnerable environments. \n Although documented hijacking cases are more common with aerial drones, similar risks apply to ground-based platforms. The physical capture of a UGV may allow attackers to gain full control of the equipment. Once under their control, adversaries can perform further actions such as connecting malicious hardware, reprogramming onboard firmware, extracting sensitive mission or sensor data, or establishing a long-term backdoor. This technique is classified as an initial access vector, as the successful hijacking of a UGV grants direct entry into its subsystems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0036",
					"description": "Researchers mentioned a risk that robotic devices are also prone to physical theft or hijacking and control. A notable vulnerability lies in the de-authentication process, which attackers can exploit to disconnect legitimate users and take control of the devices. "
					},
				{
					"reference ID": "RE0036",
					"description": "Researchers mentioned that state-sponsored hackers can hijacking military robots, potentially accessing classified design documents and experimental data related to combat robots."
				}
            ],
            "reference ID": ["RE0036"]
        },
		{
            "ID": "T5011",
            "name": "External Remote Service",
            "short_description": "Adversaries may exploit externally accessible remote services, such as telematics interfaces, vehicle APIs, or exposed dashboards to gain initial access to vehicle systems without physical proximity.",
            "full_description": "External-facing remote services in AV may include telematics systems (accessed via cellular call, SMS, or data), manufacturer-provided APIs and remote diagnostic portals. These services are designed to allow legitimate users or service providers to interact with the vehicle remotely. Access can be achieved through weak or missing authentication mechanisms, credential theft (e.g., via phishing), misconfigured access control, insecurely exposed APIs or third-party dashboards, or protocol-level vulnerabilities in cellular-based telematics system. \n A successful compromise of an external remote service may allow attackers to issue remote commands, extract vehicle data, or establish persistent control, serving as a launch point for further tactics such as execution, lateral movement, or data exfiltration.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0010",
                    "description": "Researchers exploited weak random seed generation in a vehicle telematics unit, allowing them to bypass authentication by repeatedly calling the vehicle over the public cellular network and executing remote code."
                },
				{
                    "reference ID": "RE0038",
                    "description": "Reseachers discovered that some TeslaMate dashboards were exposed online without authentication, allowing them to extract Tesla API tokens and use them to remotely control multiple Tesla vehicles via Tesla’s backend API."
                },
				{
                    "reference ID": "RE0037",
                    "description": "Researchers found that several automakers' web services and APIs had weak SSO implementations and access control flaws. These allowed remote vehicle control, user account takeover, and access to sensitive backend systems."
                }
            ],
            "reference ID": ["RE0010", "RE0037", "RE0038"]
        },
        {
            "ID": "T5014",
            "name": "Replication Through Removable Media.",
            "short_description": "Adversaries can leverage removable media such as USB drives or CDs to deliver malicious files or firmware updates to in-vehicle systems, especially during service or infotainment operations.",
            "full_description": "Unlike enterprise systems where removable media may enable broader lateral movement or initial access, vehicles typically accept limited media input, mostly for firmware updates or infotainment purposes. Nonetheless, adversaries may exploit these channels to introduce malicious software, particularly in cases where update processes lack cryptographic validation or integrity checks. \n In the automotive domain, USB remains a significant attack surface, commonly used to load firmware, update navigation data, or interact with infotainment systems. If the vehicle does not enforce strict authentication or validation of update files, an attacker could use a manipulated USB device to inject code, establish persistence, or deliver crafted payloads targeting CAN-connected components. Malicious media content (e.g., specially crafted audio files) may be interpreted differently by infotainment systems, triggering unexpected behaviour or message injection over in-vehicle networks. \n This technique may be particularly relevant in service or dealership environments, or in scenarios where vehicles are temporarily left unattended with physical access.",
            "created": "02/01/2023",
            "modified": "02/01/2024",
            "sub-technique ID": [
                "T5014.001",
                "T5014.002"
            ],
            "mitigation ID": [],
            "example": [
				{
					"reference ID": "RE0010",
					"description": "Researchers used a CD with a modified WMA audio file, which plays normally on a PC but sends arbitrary CAN packets when played by the vehicle's media player"
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers inserted a USB stick with a valid ISO to initiate an update, then replaced it with a modified ISO to force a malicious update."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers inserted a USB stick with a crafted manage_upd.nzdf file to force the HU-Intel system's navigation map to update with the malicious file."
				}
            ],
            "reference ID": ["RE0010", "RE0013"]
        },
		{
            "ID": "T5015",
            "name": "Exploit Public Facing Application",
            "short_description": "Adversaries may exploit vulnerabilities in public-facing vehicle applications or services to gain unauthorised access to vehicle systems.",
            "full_description": "Adversaries may exploit software flaws, misconfigurations, or implementation bugs in these applications to gain initial access to the vehicle or backend systems. Vulnerabilities can include stack overflows, shell injection, insecure inter-process communication (e.g., D-Bus), and other logic flaws. Exploitation may allow attackers to execute arbitrary code, bypass authentication, or manipulate vehicle components. \n Unlike External Remote Service, which targets legitimate interfaces designed for remote access (e.g., telematics APIs or mobile companion apps), Exploit Public-Facing Application refers to abusing unintended flaws in software or services that happen to be exposed to a network interface. These vulnerabilities may exist in infotainment systems, telematics units, diagnostic software, or dealership pass-through tools with network exposure. \n Successful exploitation may result in full access to exposed services, privilege escalation, or lateral movement into in-vehicle networks or backend infrastructure, depending on the scope and location of the vulnerable application.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
				 {
					"reference ID": "RE0003",
					"description": "Researchers discovered a stack overflow vulnerability in the Android OS used on Field Personal Digital Devices (FPDDs). The flaw allowed adversaries to inject malicious code, creating a side channel to exfiltrate sensitive data."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers identified an unauthenticated Wi-Fi-based API exposed by a dealership PassThru diagnostic tool. The API was vulnerable to shell injection, enabling remote code execution without user authentication."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers exploited a D-Bus service exposed on TCP port 6667 by the UConnect infotainment system, gaining unauthorised access to internal vehicle functionality through remote message injection."
				}	
            ],
            "reference ID": ["RE0003","RE0010","RE0014"]
        },
		{
            "ID": "T5016",
            "name": "Valid Account",
            "short_description": "Adversaries may abuse valid credentials for vehicle-related public-facing web services or APIs to remotely access user accounts, control limited vehicle functions, or retrieve sensitive data.",
			"full_description": "In the automotive domain, valid account abuse typically targets public-facing web platforms, mobile apps, and third-party dashboards that interact with vehicles through backend APIs or cloud services. These accounts may be compromised through weak authentication, exposed tokens, default credentials, or web-based logic flaws, allowing adversaries to impersonate legitimate users. \n  Most abused accounts are tied to services that offer limited or user-facing functionality—such as locking/unlocking doors, honking horns, checking GPS location, or viewing service history. \n While direct control over safety-critical vehicle systems is rarely achieved through this technique, the risks increase substantially when web platforms are closely integrated with the manufacturer's internal infrastructure, particularly firmware distribution servers or backend cloud networks. In these situations, attackers can use valid accounts as stepping stones for further exploitation or movement toward critical systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0037",
					"description": "Researchers discovered weak authentication and misconfigured SSO in several automotive web services, allowing attackers to access user and backend accounts to issue remote vehicle commands and extract sensitive data."
				},
				{
					"reference ID": "RE0038",
					"description": "Researchers accessed exposed TeslaMate dashboards lacking authentication, allowing retrieval of valid Tesla API tokens and remote control of over 25 vehicles using legitimate backend APIs."
				},
				{
					"reference ID": "RE0040",
					"description": "Researchers bypassed login validation in Toyota’s CRM system by modifying client-side JavaScript, allowing access to production APIs and retrieval of sensitive customer and vehicle data without proper authentication."
				}
            ],
            "reference ID": ["RE0037", "RE0038", "RE0040"]
        },
		{
            "ID": "T5017",
            "name": "Phishing",
            "short_description": "Adversaries may use phishing to steal credentials for external services or mobile apps that interface with connected vehicles, enabling remote access to limited vehicle functions or sensitive user data.",
            "full_description": "In the automotive domain, phishing is used to obtain valid credentials for accounts tied to external remote services, such as vehicle companion apps, telematics dashboards, or fleet management platforms. These services often expose limited vehicle controls (e.g., lock/unlock, horn, lights) and access to personal or operational data. \n Phishing may involve emails, social media, or fake websites impersonating manufacturers or third-party providers. Unlike enterprise environments where phishing may grant deep network access, in AV systems it typically enables attackers to abuse non-critical functions or extract user-related data. While the impact is limited in scope, successful phishing may result in loss of availability (e.g., spamming door locks or horns) and compromise of personal or fleet data.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0039",
                    "description": "At Pwn2Own Automotive 2024, researchers used phishing to steal vehicle owner credentials and sent remote control commands (unlock, start engine, honk horn) through the manufacturer’s backend API, relayed to the telematics unit via cellular."
                }
            ],
            "reference ID": ["RE0039"]
        },
		{
            "ID": "T5018",
            "name": "Modify Controller Tasking",
            "short_description": "Adversaries may modify the execution logic or tasking schedule of a controller to manipulate manipulate its execution flow and behavior.",
            "full_description": "In autonomous vehicles and robotic systems, attackers can alter control loop logic, adjust program execution order, or inject new instructions into controllers to change system behavior. \n Unlike traditional payload injection or scripting, this technique focuses on manipulating the underlying control schedules and logic blocks, such as actuation signals or navigation response timing. This typically requires firmware analysis or direct access to the control binary. \n These modifications enable persistent influence over system movements, timing, and decisions, which can facilitate further techniques like Defense Evasion.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0015",
                    "description": "Reseachers inserted signal-manipulation code into the motor pulse width modulation (PWM) to adjust the rotation of motors/rotors."
                }
            ],
            "reference ID": ["RE0015"]
        },
		{
            "ID": "T5019",
            "name": "Change Operation Mode",
            "short_description": "Adversaries may switch an ECU or vehicle component into a diagnostic or special-purpose mode to enable additional functionality, such as remote firmware updates or diagnostic commands.",
            "full_description": "Adversaries may change the operating mode of an in-vehicle controller, particularly through diagnostic interfaces such as UDS (Unified Diagnostic Services), to gain unauthorised control or control additional functions. In the automotive domain, these modes are accessed via services like Diagnostic Session Control (0x10) or RoutineControl (0x31), often used during maintenance or updates.\n Attackers may exploit these modes to suppress normal ECU behaviour, inject diagnostic commands, reset systems, or initiate firmware updates. \n The impact depends on the privileges granted in the diagnostic mode, ranging from ECU silencing to direct manipulation of vehicle functions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
				{
                    "reference ID": "RE0001",
                    "description": "Researchers noted that in a replay attack, rebroadcasting a previous message can elicit a reaction that forces the system into a reset state."
                },
				{
                    "reference ID": "RE0011",
                    "description": "Researchers sets ECU into some special diagnostic mode, such as programming mode to make ECU stop sending CAN message or to update firmware."                
                },
				{
                    "reference ID": "RE0013",
                    "description": "Researchers invoked a UDS RoutineControl service through the LastStateCall function to send diagnostic messages via the Central Gateway, enabling unauthorised actions such as ECU reset."                
                }				
            ],
            "reference ID": ["RE0001", "RE0011", "RE0013"]
        },
		{
			"ID": "T5020",
			"name": "Command and Scripting Interpreter",
			"short_description": "Adversaries may abuse command and scripting interpreters, particularly Unix shells, to execute malicious commands within automotive systems, often to inject CAN messages.",
			"full_description": "Attackers in the autonomous vehicle domain commonly use command and scripting interpreters, particularly Unix shells accessed through remote or local code execution to run commands within vehicle systems. After gaining access, they use these interpreters to send specially crafted CAN messages across the in-vehicle network. \n These messages can enable various attacks, including spoofing, replay, fuzzing, impersonation, and denial-of-service (DoS). \n Attackers typically inject these messages through command-line tools or scripts. They may also use specialized tools like CANoe and CARShark alongside command interpreters to craft and inject messages.  \nThese techniques, usually executed from OBD-II port, compromised head units, telematics devices or central gateway, can give attackers control over critical vehicle functions.",
			"created": "25/02/2025",
			"modified": "03/04/2025",
			"sub-technique ID": [],
			"mitigation ID": [],
			"example": [
				{
					"reference ID": "RE0016",
					"description": "Researchers used CANoe application to send CAN message and control ECU."
				},
				{
					"reference ID": "RE0009",
					"description": "Researchers used CARShark tool to sniff and send CAN message and control ECU."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers used a Unix shell via remote code execution to inject CAN messages and run arbitrary commands inside the head unit."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers used a Unix shell within the infotainment unit (IC or CID) to execute arbitrary commands and inject malicious CAN messages to control vehicle systems."
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers used local shell access in the infotainment system to send diagnostic and CAN control commands across components."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers used root shell of the NBT Head Unit to inject arbitrary CAN messages."
				},
				{
					"reference ID": "RE0004",
					"description": "Researchers used ROS “rostopic” commands to execute malicious navigation instructions."
				}
			],
			"reference ID": ["RE0004", "RE0009", "RE0011", "RE0012", "RE0013", "RE0014", "RE0016"]
		},
		{
            "ID": "T5027",
            "name": "Content Injection (new)",
            "short_description": "Adversaries may execute malicious code by injecting crafted non-executable content into vehicle systems",
            "full_description": "In autonomous vehicles, attackers can execute malicious code by injecting crafted content like media files that legitimate vehicle software processes. \n This technique differs from execution via commands, APIs, applications, or diagnostic tools—instead, it exploits how vehicle subsystems handle and interpret files. Infotainment units that process music, video, images, or documents may have vulnerabilities in their file parsing routines. Attackers can exploit these weaknesses by delivering specially crafted files (such as WMA, MP4, JPG, or PDF) that, when opened, force the target system to execute unauthorized code.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
				{
					"reference ID": "RE0010",
					"description": "Researchers transferred crafted WMA files to the vehicle's media player which, when played, exploited a buffer overflow vulnerability in the media player to send malicious CAN messages."
				}
            ],
            "reference ID": ["RE0010"]
        },
		{
            "ID": "T5021",
            "name": "Inter-Process Communication",
            "short_description": "Adversaries may abuse inter-process communication mechanisms to execute commands or manipulate vehicle behaviour.",
            "full_description": "Inter-process communication (IPC) allows software components in vehicle systems to exchange data and coordinate actions. Through IPC abuse, attackers can execute code or commands indirectly without compromising low-level firmware. Any attack that leverages software-level messaging between processes (rather than external interfaces or firmware) falls into this category. \n For autonomous vehicles, middleware systems like ROS (Robot Operating System) use IPC mechanisms, such as publish/subscribe messaging to share sensor data and control signals.\n Adversaries who gain access to a privileged node or process can abuse these IPC mechanisms to inject messages, hijack topics, or disrupt system coordination.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0022",
					"description": "Researchers used compromised nodes to inject fake ROS messages to topics like drive state, generator mode, or brakes, resulting in system disruptions."
				}
            ],
            "reference ID": ["RE0022"]
        },
		{
            "ID": "T5022",
            "name": "Exploitation for Client Execution",
            "short_description": "Adversaries may exploit software vulnerabilities in vehicle subsystems to achieve remote or local code execution.",
            "full_description": "Specifically, adversaries may exploit software vulnerabilities in client-facing ECUs, primarily the infotainment system, telematics unit, or other service-exposed modules to execute arbitrary code. These components often run complex operating systems (e.g., QNX, Linux) and embed third-party software libraries (e.g., QtWebkit, WebKit, Bluetooth stack), which may contain security flaws. \n Successfully exploiting such vulnerabilities allows adversaries to establish persistence, or escalate privileges inside the vehicle system.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0010",
					"description": "Researchers exploited buffer overflow vulnerability in Bluetooth stack and telematics firmware allows arbitrary code execution."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers exploited two vulnerabilities in QtWebkit of Central Information Display system to achieve arbitrary code execution"
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers discovered and exploited one zero-day vulnerability in QtWebkit of Central Information Display system to achieve arbitrary code execution"
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers exploited a heap buffer overflow in WebKit engine of QNX OS in Head Unit."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers exploited stack overflow vulnerability in provisioning updates."
				}
            ],
            "reference ID": ["RE0010", "RE0011", "RE0012","RE0013"]
        },
		{
            "ID": "T5023",
            "name": "Execution Through Firmware Modification (new)",
            "short_description": "Adversaries may modify ECU firmware to execute malicious logic within vehicle systems. This modification requires understanding the firmware layout, using chip-specific compilers or disassemblers, and uploading code through diagnostic reprogramming services.",
            "full_description": "Attackers can modify electronic control unit firmware to inject privileged malicious code. This allows them to run arbitrary code on the ECU, send CAN messages, suppress normal behavior, or survive system resets. \n Unlike command injection or diagnostic-based attacks, firmware modification embeds malicious code directly into the ECU's binary code or exploits firmware update vulnerabilities. This approach provides deeper system access, enabling attackers to move laterally, evade detection, and sabotage vehicle systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers modified firmware running on a Renesas V850 chip to execute crafted logic that allowed CAN message injection. The code was embedded using a patched assembler and executed via RoutineControl service."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers reverse-engineered the Toyota firmware update process and uploaded custom assembly code using diagnostic commands such as WriteMemory and RoutineControl to achieve arbitrary ECU control."
				}
            ],
            "reference ID": ["RE0014"]
        },
		{
            "ID": "T5024",
            "name": "Abuse Diagnostic Command (new)",
            "short_description": "Adversaries may exploit diagnostic services such as UDS to send unauthorised commands and gain control over vehicle components.",
            "full_description": "Unified Diagnostic Services  is the most widely used diagnostic protocol in the automotive domain, designed to execute service routines and commands within an Electronic Control Unit. These services are typically intended for maintenance, firmware updates, or system resets. \n  This technique involves sending specially crafted diagnostic messages, such as Diagnostic Session Control (0x10), SecurityAccess (0x27), RoutineControl (0x31), or WriteMemoryByAddress (0x34), to force an ECU into a special-purpose diagnostic mode. Once an ECU is placed in an extended or programming diagnostic session (e.g., via 0x10), and security access is granted (via 0x27), an adversary can suppress normal behaviours, disable safety-critical functions, or issue privileged commands, including firmware updates or memory reprogramming. \n Unlike the Command and Scripting Interpreter technique, which leverages Unix shells or ROS tools to run scripts or command-line utilities inside compromised systems, Diagnostic Command Execution does not rely on general-purpose interpreters. Instead, it directly utilises automotive-specific diagnostic protocols and formats. These commands are typically initiated from diagnostic tester devices, either physically connected (e.g., via the OBD-II port) or remotely executed through compromised vehicle subsystems such as telematics or infotainment units. \n This capability significantly broadens the attack surface, allowing an adversary to pivot to other tactics such as Persistence, Defense Evasion or Discovery.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0011",
                    "description": "Researchers found a weakness in Security Access service, which used fixed seed and simple XOR operations and AES algorithm, which allow them to bypass and do some privileged operations on ECUs."
                },
				{
                    "reference ID": "RE0013",
                    "description": "Researchers used internal tester, including NBT Head Unit and TCB to send UDS messages via RoutineControl, WriteDataByIdentifie and ECU reset service, to Reset, control or Reconfigure different ECUs."
                },				
				{
					"reference ID": "RE0041",
					"description": "Researchers used DiagnosticSessionControl and RoutineControl to invoke pre-programmed routines on ECUs, enabling control over actuators like seatbelt tensioners and pre-collision braking."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers used SecurityAccess service to request a seed and send the calculated key to unlock privileged diagnostic access on ECUs."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers used RequestDownload and TransferData services to upload data to ECUs, showcasing how firmware could be altered via diagnostic protocols."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers injected InputOutputControl and WriteDataByIdentifier messages to simulate sensor values and control vehicle states via diagnostic interfaces."
				}
            ],
            "reference ID": ["RE0011","RE0013","RE0041"]
        },
		{
            "ID": "T5025",
            "name": "External application (new)",
            "short_description": "Adversaries may use external applications to execute payloads or send crafted messages into the in-vehicle network.",
            "full_description": "Adversarials can use external applications, especially those on mobile devices connected to vehicles, to send malicious commands or run harmful code on vehicle systems. They can exploit vehicle connections like OBD2 Bluetooth adapters or in-car WiFi to send commands from a remote server to the vehicle's internal network. \n Unlike other execution techniques that target the vehicle's control units, this technique uses external applications. This strategy gives attackers deeper system access through user-installed software, allowing them to move on to other attacks like maintaining access, gaining higher privileges, avoiding detection, or gathering information.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0022",
					"description": "Researchers used an infected application on the mobile phone to send commands to the vehicle and communicate with the attacker's server."
				}
            ],
            "reference ID": ["RE0022"]
        },
		{
            "ID": "T5026",
            "name": "OTA Process Manipulation (new)",
            "short_description": "Adversaries may use the OTA update process to deliver and execute unauthorised code or firmware in vehicle systems.",
            "full_description": "Adversaries may use OTA update mechanisms to deliver and execute unauthorised code on in-vehicle components. This involves exploiting flaws in the OTA process, such as bypassing code-signing protections, manipulating update metadata, or abusing update daemons to install and run modified firmware or executables. \n Unlike local firmware modification via physical access or diagnostics, OTA process manipulation enables remote execution across telematics, infotainment, or critical ECUs. This can lead to persistent backdoors, or enable follow-on techniques such as lateral movement, privilege escalation, and persistence.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0012",
                    "description": "Researchers exploited Tesla's OTA update process by bypassing code signing checks in the update packages and abusing the OTA update daemons such as 'cid-updater' and 'ape-updater' to flash malicious firmware onto ECUs. They manipulated update metadata (e.g., JSON manifests and versioning files) to insert custom payloads and used remote triggers to execute the OTA flow, successfully compromising the Gateway, Body Control Module (BCM), and Autopilot ECUs."
                }
            ],
            "reference ID": ["RE0012"]
        },
		{
            "ID": "T5028",
            "name": "Execution through API",
            "short_description": "Adversaries may abuse exposed or insecure APIs to execute remote vehicle commands or retrieve sensitive vehicle and user information.",
            "full_description": "In the automotive industry, APIs enable remote services like vehicle locking/unlocking, engine starting, GPS tracking, and fleet management. These APIs integrate with telematics units and mobile apps through backend infrastructure. \n Attackers can exploit API vulnerabilities including weak authentication, default credentials, incorrect permissions, or exposed endpoints. Such access could enable control of non-critical vehicle functions, like horn activation or door unlocking and expose sensitive data such as vehicle location and personal information. \n While these attacks typically cannot access the in-vehicle network directly, they may provide a foothold for deeper penetration into poorly secured manufacturer cloud systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0037",
					"description": "Researchers discovered API flaws in multiple brands that allowed remote control of vehicle functions such as unlocking, starting engines, and honking the horn due to weak authentication and misconfigured access controls."
				},
				{
					"reference ID": "RE0038",
					"description": "An exposed TeslaMate dashboard allowed access to Tesla API tokens, enabling remote actions like honking the horn or locating vehicles."
				},
				{
					"reference ID": "RE0039",
					"description": "At Pwn2Own Automotive 2024, researchers used stolen credentials to send commands via backend APIs to control vehicles remotely."
				},
				{
					"reference ID": "RE0040",
					"description": "Toyota's CRM system exposed vehicle APIs without proper server-side validation, allowing attackers to access customer data by modifying client-side JavaScript. "
				}
            ],
            "reference ID": ["RE0037", "RE0038", "RE0039", "RE0040"]
        },
		{
            "ID": "T5029",
            "name": "Account Manipulation",
            "short_description": "Adversaries may manipulate or reuse system accounts to maintain persistent access within the vehicle network.",
            "full_description": "Adversaries may manipulate system accounts to retain or elevate access to autonomous vehicle components. This may involve reusing session credentials, such as SSH keys, modifying authentication parameters, or assigning elevated roles to accounts. \n Unlike initial access techniques, this persistence tactic enables continued control over vehicle systems even after reboots or attempted resets.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0004",
                    "description": "Researchers reused administrative SSH access via session hijacking to persistently control the ROS-based navigation of a Husky UGV, even overriding the legitimate operator."
                }
            ],
            "reference ID": ["RE0004"]
        },		
		{
            "ID": "T5031",
            "name": "Create or Modify System Process",
            "short_description": "Adversaries may create or modify system configuration or process files within vehicle components to enable automatic execution of malicious behaviour during system start-up or runtime.",
            "full_description": "Adversaries can achieve persistence by modifying system process configurations , including launch files, service configurations, and runtime-triggered scripts  within electronic control units or domain controllers. These files and scripts execute automatically during the boot process or system runtime without user interaction. \n Such modifications enable persistent execution across reboots or environmental triggers. \n Unlike techniques in the Enterprise domain that rely on traditional operating system services, these methods exploit startup logic and embedded system mechanisms specific to automotive software.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0005",
                    "description": "Researchers modify ROS config/launch files to alter node behaviour on startup. These modifications take effect after a restart and changes persist across reboots."
                },
				{
                    "reference ID": "RE0013",
                    "description": "Researchers modify pdm_nbt.xml, which is loaded and executed by the system's telematics functions. This will executes diagnostic messages onto K-CAN without user interaction."
                }
            ],
            "reference ID": ["RE0005", "RE0013"]
        },
		{
            "ID": "T5032",
            "name": "Modify Program",
            "short_description": "Adversaries may inject or modify a program or a file in a vehicle’s firmware to maintain persistence. This could involve adding new functionality, altering existing code, or injecting malware to gain long-term control over the system.",
            "full_description": "In autonomous vehicles, adversaries can maintain persistence by modifying firmware or injecting programs into the vehicle's systems. This involves altering existing program code in the ECU, such as adding new functions, changing logic, or inserting malware during firmware updates. \n These modifications persistently alter vehicle behavior, allowing adversaries to control the system or trigger malicious actions. This technique pairs effectively with ``Event triggered execution`` to set specific activation conditions. \n Unlike the ``Pre-OS Boot: System Firmware`` technique, which involves major system changes, this technique makes smaller, targeted modifications to existing firmware or injects minor programs.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0012",
                    "description": "Reseachers provides some patching on the Easter Eggs functions to change the motion list and skip signal check, to make the vehicle do custom move."
                },	
{
                    "reference ID": "RE0012",
                    "description": "Reseachers modify gtw.hex in Gateway ECU to open a backdoor, to send CAN bus when car is running."
                },				
				{
                    "reference ID": "RE0010",
                    "description": "Reseachers add a program which contacts with PassThru device, exploit it and modify startup script to make it always enabled."
                },
				{
					"reference ID": "RE0046",
					"description": "Researchers uploaded modified firmware to the Parking Assist Module and Electronic Parking Brake from within the vehicle’s network to enable persistent control."
				}
            ],
            "reference ID": ["RE0046","RE0010", "RE0012"]
        },
		{
            "ID": "T5033",
            "name": "Event triggered execution",
            "short_description": "Adversaries may establish persistence by adding malicious code that runs only when certain events happen in the vehicle.",
            "full_description": "In autonomous or connected vehicles, attackers can maintain persistence or hide malicious code by embedding triggers that activate at specific events, such as reaching certain vehicle speeds, steering angles, gear positions, or sensor readings. These event-driven mechanisms are typically embedded in ECU firmware, diagnostic routines, or control logic. \n Since these triggers are based on functional states or ECU-specific logic rather than typical operating system events, they're more difficult to identify during static analysis or early testing phases.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0016",
					"description": "Researchers added malicious code with a predefined condition: when the car's speed exceeds 200 km/h, the code replays the CAN message that triggers the driver's window to open."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers developed a program that sends malicious messages when a PassThru device connects to the vehicle. This program waits for specific environmental triggers, such as a predefined date and time, before sending messages."
				}
            ],
            "reference ID": ["RE0010","RE0016"]
        },
		{
            "ID": "T5036",
            "name": "Pre-OS Boot",
            "short_description": "Adversaries can modify or flash firmware on a vehicle's Electronic Control Units to establish persistence, gaining control over the system before it fully boots.",
            "full_description": "Adversaries gain persistence by modifying or flashing system firmware during the boot process. This involves altering firmware on the ECU, to install custom functions or malware before the operating system loads. \n These modifications persist across reboots and are difficult to detect because they occur below the operating system, making them bypass host-based defenses. This technique ensures the adversary retains control over the vehicle's systems, enabling them to manipulate ECU behavior even if the operating system is reset or reinstalled. \nCompared to the Modify Program technique, this technique involves more fundamental changes. It typically requires flashing or replacing large portions of the firmware at a system level, making it a more invasive and detectable attack.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0011",
					"description": "Researchers modified Gateway firmware and edited boot.img to bypass update verification, enabling persistent execution after every reboot"
				},				
				{
					"reference ID": "RE0012",
					"description": "Researchers flashed custom firmware onto the Gateway, BCMs, and APE, making the attack persist after reboots."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers reflashed the TPMS firmware to install code that detects and sends specific CAN packets to the in-vehicle network."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers reprogrammed the V850 firmware to maintain long-term access and enable repeated CAN message injection."
				}
            ],
            "reference ID": ["RE0011", "RE0012", "RE0010", "RE0014"]
        },
		{
            "ID": "T5038",
            "name": "Valid Accounts",
            "short_description": "Adversaries may exploit valid credentials to access autonomous vehicle systems or services, bypassing authentication to gain unauthorized control or maintain persistent access.",
            "full_description": "In autonomous vehicles, adversaries may exploit default, weak, or misconfigured accounts to access internal systems such as infotainment units, telematics control units, or ROS-based environments. \n These accounts often exposed via SSH, Telnet, or web services, and may lack password protection or rely on default credentials. \n Common targets include: \n\t - Default or hardcoded Linux accounts (e.g., root on infotainment systems) \n\t - Remote shell services (SSH/Telnet)\n\t - Cloud-based telemetry or OTA management portals. \n\t - Third-party applications. \n Unlike exploitation techniques that leverage software flaws, this method relies on using legitimate credentials and often allowing full system access without triggering alarms.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0004",
					"description": "Researchers' SSH session with administrator privileges enables full control of ROS packages."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers demonstrate that the Central Information Display system can SSH to the Instrument Cluster and gain root privileges without a password."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers show that the Central Information Display system can telnet to the Parrot system without password authentication or restrictions."
				}
            ],
            "reference ID": ["RE0004","RE0013"]
        },
		{
            "ID": "T5039",
            "name": "Abuse Elevation Control Mechanisms",
            "short_description": "Adversaries may abuse or bypass built-in permission controls to gain higher-level access in a vehicle system.",
            "full_description": "Autonomous vehicles use access control mechanisms, such as diagnostic security levels, or authentication protocols to restrict access to critical functions. Adversaries may abuse these mechanisms by exploiting weak configurations or protocol flaws to elevate privileges. For example, bypassing UDS Security Access to perform ECU reprogramming or abusing default permissions to activate diagnostic services. \n This technique differs from Exploitation for Privilege Escalation, which involves exploiting software vulnerabilities to gain higher privileges. In contrast, Abuse Elevation Control Mechanisms relies on misusing or tricking existing controls rather than exploiting coding flaws. It typically targets design weaknesses or poor enforcement of permissions, rather than programming bugs.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0009",
					"description": "Researchers exploited weak protocol standard access controls to gain permission for diagnostic services and ECU updates."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers bypassed the Security Access function to gain permission for critical actions."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers can inject diagnostic messages into critical ECUs by exploiting the control features in the Gateway unit."
				},
				{
					"reference ID": "RE0016",
					"description": "Researchers exploit OBD-II filtering to gain elevated permissions for accessing critical CAN communications."
				}
            ],
            "reference ID": ["RE0009","RE0016", "RE0011", "RE0013"]
        },
		{
            "ID": "T5040",
            "name": "Exploitation for Privilege Escalation",
            "short_description": "Adversaries may exploit software vulnerabilities in AV systems to gain elevated privileges and execute unauthorised actions.",
            "full_description": "Adversaries may exploit vulnerabilities in operating systems or services—especially within infotainment or telematics units running Linux-based environments—to gain root or administrative access. \n Unlike embedded ECUs that often lack a traditional access control model, infotainment and telematic systems provide clearer privilege boundaries. Exploiting these systems allows adversaries to gain high-level control and potentially pivot to other components via internal networks. \n This technique differs from Abuse Elevation Control Mechanisms, which targets weak or misused access controls rather than software flaws.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0012",
					"description": "Researchers exploited a kernel vulnerability (CVE-2017-6261) to gain root access to the CID."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers exploited a vulnerability to gain elevated permissions and root privileges on the Head Unit and TCB."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers gained root access to the Uconnect head unit by exploiting command injection vulnerabilities in the D-Bus."
				}
            ],
            "reference ID": ["RE0012","RE0013","RE0014"]
        },
		{
            "ID": "T5041",
            "name": "Impair Defenses",
            "short_description": "Adversaries may disable or modify defensive mechanisms in autonomous vehicle systems to evade detection and enable further malicious activity.",
            "full_description": "This includes modifying or disabling native system protections such as kernel-level security modules, loggers, and firewall rules. These protections are primarily found in Linux-based platforms, which are common in telematics and infotainment control units. \n In some cases, adversaries tamper with system-level operations to erase traces of malicious activity by wiping logs or removing attack code after execution. These actions aim to evade forensic analysis, prevent alert generation, and suppress security policies. \n The impact of impairing defenses not only conceals the attacker's presence but also enables other tactics, such as Persistence, Discovery, Execution, or Lateral Movement to be carried out.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0011",
					"description": "Researchers invoked reset_security_ops() to disable AppArmor and gain root access on CID"
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers patched aa_g_profile_mode in the kernel to disable AppArmor security protections"
				},
				{
					"reference ID": "RE0009",
					"description": "Researchers embedded attack code within telematics ECU and erased evidence after the attack"
				}
            ],
            "reference ID": ["RE0011","RE0012","RE0009"]
        },
		{
            "ID": "T5042",
            "name": "Obfuscated Files or Information",
            "short_description": "Adversaries may hide malicious content within files to evade detection or analysis.",
            "full_description": "Adversaries may use obfuscation techniques, such as encoding, encryption, or deceptive formatting to hide malicious content within files used by the vehicle system. \n  In autonomous vehicles, this may involve disguising payloads inside media files, configuration scripts, firmware packages, or diagnostic instructions to evade detection by security mechanisms and analysts. These files appear harmless to the system or user while delivering hidden functionality for initial access, execution, or further evasion.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
               {
					"reference ID": "RE0010",
					"description": "Researchers designed malicious WMA files that appeared as normal audio tracks but contained malicious information"
				}
            ],
            "reference ID": ["RE0010"]
        },
		{
            "ID": "T5043",
            "name": "Bypass Authentication Challenge (new)",
            "short_description": "Adversaries may bypass authentication challenges to disable protections and gain unauthorised access to restricted vehicle functions or data.",
            "full_description": "Authentication challenges are typically implemented through diagnostic protocols (e.g., UDS Security Access), backdoor mechanisms, or other ECU-level access controls. Attackers can evade these protections by exploiting weak algorithms, replaying static seeds, or using fault injection to disrupt security checks. This allows them to bypass security barriers without alerts or valid credentials, gaining access to restricted commands, memory, and configuration functions while circumventing normal authentication processes. \n Such authentication bypasses often enable broader attacks like firmware extraction, unauthorized command execution, or ECU reconfiguration. They may serve as stepping stones to persistence, execution, or system impact.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
				{
					"reference ID": "RE0011",
					"description": "Researchers bypassed the UDS Security Access service by breaking a weak algorithm in the challenge-response mechanism."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers bypassed the security token of the backdoor by discovering that the token was static in the IC firmware."
				},
				{
					"reference ID": "RE0041",
					"description": "Since Ford vehicles always send the same seed, the response remains constant, allowing researchers to sniff and replay the message to bypass the challenge-response mechanism."
				},
				{
					"reference ID": "RE0043",
					"description": "Researchers targeted the privilege check inside ReadMemoryByAddress by sending commands over the CAN bus. They triggered a voltage glitch during the 1700-microsecond delay before the ECU response. This glitch disrupted the privilege-check logic, causing the ECU to return protected memory data without authentication verification. By repeating this glitch approximately 300,000 times, they extracted the full 512 KB firmware over 3 days."
				}
            ],
            "reference ID": ["RE0011", "RE0041", "RE0043"]
        },
		{
            "ID": "T5044",
            "name": "Bypass Code Integrity Checks(new)",
            "short_description": "Adversaries may bypass code integrity checks to weaken protection mechanisms and install unauthorised code without detection.",
            "full_description": "Adversaries may bypass code integrity mechanisms, such as signing checks or checksums to weaken built-in protections and avoid detection. These protections ensure that ECUs and other components accept only authentic code or messages. \n In autonomous vehicle systems, this may include: \n\t - Bypassing signature checks to install malicious firmware on ECUs \n\t - Circumventing checksum validation to inject fake but seemingly legitimate CAN messages \n\t - Disabling code integrity checks to run modified software. \n When bypassed, unauthorized firmware or crafted messages can enter the system without triggering security controls. \n Successfully evading these integrity checks enables attackers to install persistent code, inject malicious messages, or escalate privileges within the vehicle network.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers reverse engineered the Renesas V850 chip to bypass the checksum and data integrity technique to craft arbitrary messages that would be valid to the ECUs listening"
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers bypassed the code signing in the Gateway to install custom firmware."
				},
				{
					"reference ID": "RE0023",
					"description": "Researchers bypassed the code signing mechanism to flash a custom SH2A MCU firmware after the T-Box system was compromised."
				}
            ],
            "reference ID": ["RE0014", "RE0012", "RE0023"]
        },
		{
            "ID": "T5048",
            "name": "Adversary-in-the-Middle",
            "short_description": "Adversaries may intercept authentication-related traffic between vehicle components or external devices to steal credentials or pairing data.",
            "full_description": "Adversaries may position themselves between two communicating entities within or around the vehicle system to intercept authentication materials such as tokens, challenge–response values, or Bluetooth pairing keys. This adversary-in-the-middle position enables the attacker to monitor or manipulate traffic during authentication flows, potentially allowing them to steal credentials and gain unauthorised access to vehicle systems. \n In the automotive context, this may involve sniffing seed-key exchanges during ECU programming (e.g., UDS SecurityAccess), or intercepting Bluetooth pairing attempts to recover MAC addresses and PINs. These credentials can then be replayed or used to impersonate legitimate devices and unlock vehicle functions without detection.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0011",
					"description": "Researchers sniffed UDS SecurityAccess seed and key values during an ECU firmware flashing process. They discovered that the ECU returned a fixed seed and accepted a predictable key, allowing them to replay these values and unlock the ECU without computing the correct response."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers sniffed Bluetooth MAC addresses using open-source tools like Bluesniff and a USRP-based software radio when the car initiated pairing with a known device. After identifying the MAC address, they brute-forced the PIN required for pairing."
				}			
            ],
            "reference ID": ["RE0010", "RE0011"]
        },
		{
            "ID": "T5045",
            "name": "Brute Force",
            "short_description": "Adversaries may use brute force techniques to gain access to credentials used by vehicle systems or connected services.",
            "full_description": "Adversaries may use brute force techniques to obtain valid credentials when passwords, PINs, or keys are unknown. This includes repeatedly guessing login information through direct interaction with services (e.g., SSH, Bluetooth pairing) or offline analysis (e.g., cracking WPA2 handshakes). \n In autonomous vehicle systems, targets may include OS-level accounts, wireless authentication (e.g., Wi-Fi, Bluetooth), vehicle-connected applications, or cloud services integrated with the vehicle. \n Successful brute forcing can enable access to restricted functions or data, supporting further tactics such as Lateral Movement, Execution, or Discovery.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0003",
					"description": "Researchers performed a disassociation attack on a UAV's Wi-Fi connection to repeatedly trigger WPA2 four-way handshakes. By eavesdropping on these handshakes, they intercepted the Message Integrity Code, which can be used to guess the WPA2 pre-shared key and derive encryption keys."
				},
				{
					"reference ID": "RE0004",
					"description": "Researchers conducted a dictionary-based brute force attack on SSH authentication of the Husky UGV onboard computer."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers brute-forced Bluetooth PINs to enable pairing without driver awareness."
				}
            ],
            "reference ID": ["RE0003", "RE0004", "RE0010"]
        },
		{
            "ID": "T5046",
            "name": "Modify Authentication Process",
            "short_description": "Adversaries may alter the authentication process to bypass access controls or impersonate legitimate users.",
            "full_description": "They may modify authentication logic in vehicle systems or connected platforms to gain unauthorised access without using valid credentials. This may include altering firmware-level checks within ECUs, crafting fake authentication messages or manipulating client-side code in web interfaces that interact with vehicle services. \n By changing how authentication is handled, attackers can access vehicle functions, user data, or backend systems. This technique may be used to unlock vehicles, access internal tools, or impersonate users without triggering standard access controls.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
				  "reference ID": "RE0031",
				  "description": "Researchers reverse-engineered the ECU firmware in VW Group vehicles and discovered a global master key used for authentication. They then modify the authentication logic flow by creating their own “valid” authentication packets using the known master key, tricking the vehicle into granting access."
				},
				{
				  "reference ID": "RE0040",
				  "description": "Researchers modified the JavaScript login logic in the dev version of Toyota's CRM app to trick the app into thinking a user was logged in, bypassing the authentication process entirely.."
				}
            ],
            "reference ID": ["RE0031", "RE0040"]
        },
		{
            "ID": "T5047",
            "name": "Exploitation for  Credential Access",
            "short_description": "Adversaries may exploit software vulnerabilities or misconfigurations to gain access to credentials or authenticated systems.",
            "full_description": "Adversaries may exploit vulnerabilities or logic flaws in vehicle-connected systems, mobile apps, cloud services, or identity platforms to obtain credentials or bypass authentication mechanisms.\n  This can involve modifying application behaviour, abusing insecure API interactions, or exploiting misconfigured authentication flows such as Single Sign-On (SSO). \n In the AV ecosystem, successful exploitation can expose credentials for backend services, user accounts, or cloud-connected vehicle platforms, potentially leading to further access and control across systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0040",
					"description": "Researchers bypassed login security by modifying the development application's JavaScript and redirecting it to production APIs that lacked authentication, which allowed access to actual customer credentials and data."
				},
				{
					"reference ID": "RE0037",
					"description": "Researchers exploited misconfigurations in Single Sign-On portals to perform password resets, gaining complete control over employee and contractor accounts."
				}
            ],
            "reference ID": ["RE0037","RE0040"]
        },
		{
            "ID": "T5049",
            "name": "Steal Application Access Token",
            "short_description": "Adversaries may steal access tokens from vehicle-connected applications to gain unauthorised access to remote systems or services.",
            "full_description": "Application access tokens are used to authenticate API requests on behalf of a user or service. In autonomous vehicle ecosystems, tokens may be used by mobile apps, third-party platforms, or telematics systems to access vehicle functions, user data, or backend services.\n Adversaries may exploit insecure token storage, misconfigurations, or exposed dashboards in third-party applications to extract valid access tokens. \n For example, researchers accessed misconfigured TeslaMate dashboards and extracted Tesla API tokens, which allowed unauthorised remote control over multiple vehicles. Once stolen, tokens can be used to interact with vehicle APIs with the same permissions as the legitimate user, potentially enabling actions like unlocking doors, disabling protections, or tracking location.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0038",			
					"description": "Tesla owners use third-party applications like TeslaMate that have misconfigurations and security weaknesses. These applications store sensitive information, including Tesla API keys, without adequate protection. Researchers can exploit these vulnerabilities to extract the API keys from exposed TeslaMate dashboards."
				}
            ],
            "reference ID": ["RE0038"]
        },
		{
            "ID": "T5050",
            "name": "Network Sniffing",
            "short_description": "Adversaries may passively capture in-vehicle or external network traffic to identify communication structures, credentials, or operational data.",
            "full_description": "Network sniffing refers to the passive monitoring or capture of data on a vehicle’s internal or external network interfaces. Adversaries may leverage direct access, such as OBD-II or Ethernet ports, to place the interface into monitoring mode and intercept messages transmitted between Electronic Control Units (ECUs) or backend servers. In-vehicle network sniffing typically focuses on CAN bus communication, revealing message IDs, control commands, and diagnostic exchanges. \n Vehicles may also use Ethernet or wireless connections for communication with external services, often over protocols such as HTTP, HTTPS, or MQTT. If unencrypted or misconfigured, these channels may expose sensitive operational data, update requests, or credentials to sniffing attacks. \n This technique provides attackers with knowledge required for further activities such as replay, spoofing, or remote exploitation.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": ["T5050.001"],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0016",
					"description": "Researchers sniff communication to capture the CAN messages between ECUs and diagnostic messages between ECUs and gateway."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers sniff and capture CAN messages from the vehicle via OBD-II port and diagnostic application."
				},
				{
					"reference ID": "RE0044",
					"description": "Researchers describes how attackers can connect to the OBD-II port and use sniffing tools like can-utils to monitor CAN traffic. By observing message IDs and data patterns."
				}
            ],
            "reference ID": ["RE0014","RE0016", "RE0022", "RE0044", "RE0011"]
        },
		{
            "ID": "T5037",
            "name": "Network Service Discovery",
            "short_description": "Adversaries may attempt to identify services running on remote systems within the in-vehicle network or on connected external interfaces.",
            "full_description": "This is often done to discover services that can be exploited for lateral movement, remote code execution, or privilege escalation.\n Within connected and autonomous vehicles, this discovery may involve scanning the in-vehicle Ethernet network between components such as the head unit, telematics unit, and gateways. Tools like nmap can be used after gaining local access to identify open ports and active daemons, such as HTTP servers, D-Bus over IP, SSH, or custom diagnostic services.\n Externally, adversaries may scan communication links between the vehicle and backend infrastructure, such as over Wi-Fi, cellular, or OTA update channels to enumerate exposed services. Discovering these services allows attackers to understand system architecture, assess attack surfaces, and plan subsequent actions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [
                "M2001"
            ],
            "example": [
                {
					"reference ID": "RE0013",
					"description": "Researchers gained access to the vehicle’s internal Ethernet network via a USB-to-Ethernet adapter. They ran nmap scans to identify open ports and running services on different IP addresses. This scanning revealed remote services that might be exploitable."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers performed an nmap scan on a Jeep Cherokee vehicle to identify exposed TCP services. The scan revealed multiple open ports prior to the patch, including 6667 and 6010, which were D-Bus over IP ports used for inter-process communication (IPC) and remote procedure call (RPC) mechanisms."
				}
            ],
            "reference ID": ["RE0013","RE0014"]
        },
		{
            "ID": "T5051",
            "name": "System Network Connection Discovery",
            "short_description": "Adversaries may attempt to get a listing of network connections between ECUs or to/from a compromised vehicle system by querying internal communication paths",
            "full_description": "This technique involves discovering current or potential network connections between components within the vehicle or between the vehicle and external systems. \n Within the vehicle, attackers may use utilities such as `netstat` or inspect Ethernet and wireless interfaces to identify active communication links across domains like infotainment, telematics, and gateways. In addition to standard system tools, adversaries in the automotive domain may actively probe the internal network by sending crafted diagnostic or CAN messages and observing which ECUs respond. \n Unlike Network Sniffing, which passively captures data, or Network Service Discovery, which scans for listening services (e.g., with nmap), this technique focuses on uncovering ``who is talking to whom`` within the system or over internal/external interfaces. \n  This knowledge enables targeted lateral movement, injection, or denial-of-service attacks on connected modules.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0010",
					"description": "Researchers compromised a PassThru device connected to a vehicle’s OBD-II port and used it to send pre-programmed messages over the CAN bus to discover connected ECUs and internal communication structure."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers used netstat on the Uconnect system to list active TCP listeners and identify ports such as 6010, 6667, and 6020."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers inspected the network interfaces on the Uconnect system, identifying internal (uap0) and external (ppp) interfaces used for Wi-Fi and cellular communication. This provided insight into system-level communication paths and data flow."
				}
            ],
            "reference ID": ["RE0010", "RE0014"]
        },
		{
            "ID": "T5052",
            "name": "File and Directory Discovery",
            "short_description": "Adversaries may search for files or directories on vehicle systems to locate valuable information or components.",
            "full_description": "Adversaries may explore the file system of in-vehicle components, such as infotainment units, telematics ECUs, or gateways to discover configuration files, upgrade packages, debug logs, or binaries. These files may reveal system behaviours, hardware support, or update mechanisms that support further exploitation. File and directory discovery may occur via shell access, firmware unpacking, or by analysing mounted storage devices such as USB drives or SD cards.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0040",
					"description": "Researchers analyzed the Uconnect file system to locate sensitive configuration files and binaries."
				},
				{
					"reference ID": "RE0037",
					"description": "Researchers discovered the USB configuration file in NBT Head Unit which revealed that it supports several specific USB-to-ETHERNET adapters by default."
				},
				{
					"reference ID": "RE0038",			
					"description": "Researchers discovered that the vehicle's gateway connects to an SD card, allowing them to find debug and upgrade files."
				}
            ],
            "reference ID": ["RE0037","RE0038","RE0040"]
        },
		{
            "ID": "T5053",
            "name": "Remote Services",
            "short_description": "Adversaries may abuse remote services to gain access and move laterally.",
            "full_description": "In autonomous vehicles, remote access services, such as SSH, Telnet, or manufacturer-defined command ports allow attackers to move laterally between components once initial access is obtained. \n These services may be accessible due to weak configurations (e.g., hard-coded credentials, anonymous access, or improper key management). By logging in through these legitimate remote services, attackers can interact with or control critical ECUs. \n Unlike Exploitation of Remote Services techniques, this method relies on valid credentials or insecure service configurations rather than software vulnerabilities.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0011",
					"description": "Researchers accessed the Instrument Cluster (IC) via SSH using stored private keys without a password, enabling full root access for lateral movement from the CID."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers connected to the Parrot system via Telnet through an open port without authentication, gaining control over the component."
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers used command port 3500 on the gateway to trigger a Telnet shell on port 23, which could be accessed using a hard-coded password, allowing remote login and further actions."
				}
            ],
            "reference ID": ["RE0011", "RE0012"]
        },
		{
            "ID": "T5076",
            "name": "Exploitation of Remote Services",
            "short_description": "Adversaries may exploit software vulnerabilities in remote services to move laterally within the vehicle network",
            "full_description": "In autonomous vehicles, remote services include diagnostic interfaces, inter-process communication channels, testing tools, and network protocols running on components like head units, gateway ECUs, and telematics units. These exploits enable unauthorized code execution or control over other ECUs without requiring valid credentials. \n Successful exploitation allows lateral movement across the in-vehicle network, letting adversaries inject CAN or UDS messages, flash firmware, manipulate system behavior, and affect safety-critical functions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers exploited a vulnerability in the D-Bus service running on the head unit to achieve lateral movement towards other systems connected via the CAN bus."
				},
				{
					  "reference ID": "RE0011",
					  "description": "Researchers identified and exploited software vulnerabilities in the CID and gateway ECUs, enabling them to remotely inject CAN messages and manipulate other ECUs within the vehicle network."
				},
				{
					  "reference ID": "RE0013",
					  "description": "Researchers exploited vulnerabilities in the Head Unit and Telematics Control Box (TCB) to gain root privileges, allowing them to remotely transmit CAN and UDS messages to control downstream ECUs."
				}
            ],
            "reference ID": ["RE0011", "RE0013","RE0014"]
        },
		{
            "ID": "T5054",
            "name": "Lateral Tool Transfer",
            "short_description": "Adversaries may transfer tools or payloads between systems within the in-vehicle network to facilitate further lateral movement actions.",
            "full_description": "After gaining access to a vehicle's internal network, adversaries can move malicious tools, scripts, or custom payloads between components, for example, from the head unit to other ECUs. \n This typically involves uploading SSH keys, configuration files, or modified firmware images to exploit vulnerabilities or establish control. These transfers occur through legitimate update mechanisms, diagnostic sessions, OBD-II port interfaces, or custom protocols. \n This technique allows attackers to move laterally across ECUs to launch additional attacks or maintain persistent access to the system.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researcher uploaded SSH public key and configuration file to the head unit for further exploitation and control."
				},
				{
					  "reference ID": "RE0010",
					  "description": "Researchers use already-compromised PassThru devices to install malicious binaries on vehicles during routine service. The malware could propagate to the vehicle’s telematics ECU, and even act as a worm to infect more PassThru devices and cars."
				}
            ],
            "reference ID": ["RE0010","RE0014"]
        },
		{
            "ID": "T5055",
            "name": "Vehicle Worm Propagation (new)",
            "short_description": "Adversaries may deploy self-replicating malware that autonomously spreads across connected vehicles, enabling lateral movement through vehicular networks.",
			"full_description": "In autonomous vehicles, adversaries may design self-replicating malware capable of automatically scanning and spreading across multiple vehicles.\n  Unlike traditional lateral movement that targets a single system, this technique focuses on propagation across vehicle fleets connected via cellular networks, Wi-Fi, or vehicle-to-vehicle (V2V) communication. After compromising an initial vehicle, the worm can exploit the same vulnerability in neighboring vehicles without requiring further attacker interaction. \n Though this type of attack hasn't been demonstrated in practice, researchers have proposed it as a highly feasible and impactful scenario, especially in urban areas where vehicles frequently cluster. \n Successful execution of this technique could lead to mass compromise, coordinated vehicle manipulation, or widespread disruption of transportation systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers proposed the idea of a vehicle worm that would automate scanning, exploitation, and remote control across vulnerable vehicles connected via cellular networks."
				},
				{
					"reference ID": "RE0047",
					"description": "Researchers proposed an epidemic model for vehicular worm propagation using V2V communication. The study demonstrated how worms could autonomously spread through urban traffic, infecting a large portion of the fleet in minutes under high mobility conditions."
				}

            ],
            "reference ID": ["RE0014", "RE0047"]
        },
		{
            "ID": "T5056",
            "name": "Data from Local System",
            "short_description": "Adversaries may collect data stored locally within vehicle systems to support their objectives.",
            "full_description": "This data includes configuration files, navigation history, GPS coordinates, vehicle identifiers, and internal communication logs (e.g., CAN messages). \n Data collection can occur through either physical access or remote compromise. Attackers retrieve data from local nonvolatile memory, flash storage, file systems, or inter-process communication channels. They may also use connected mobile applications or external devices to access data from in-vehicle networks. \n This information enables attackers to understand system behavior, identify vulnerabilities, track user movement, or facilitate further attacks.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0002",
					"description": "Researchers targeted local data stored in nonvolatile memory in the unmanned system to extract sensitive information."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers exploited UConnect to collect multiple file systems from NAND flash memory, including Multimedia Card, Embedded Transaction File System and QNX file system."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers collected GPS data via D-Bus to track vehicle locations without user knowledge."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers collected CAN data from a malicious application on a mobile phone connected to the vehicle."
				}
            ],
            "reference ID": ["RE0002", "RE0014", "RE0022"]
        },
		{
            "ID": "T5071",
            "name": "Data from Removable Media",
            "short_description": "Adversaries may collect sensitive files from removable media connected to vehicle systems.",
            "full_description": "In automotive environments, removable media use is rare and typically limited to specific functions like infotainment systems, diagnostics, and firmware updates. When such media is connected and accessible, attackers with network or physical access can extract sensitive information, including logs, media files, and configuration data. \n For example, an SD card connected to a central gateway might store system updates, logs, and state information that could be valuable to attackers. \n While this technique isn't commonly seen due to the limited presence of removable media in most vehicles, it remains a potential security vulnerability in certain system designs",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0035",
					"description": "Researchers collected all files from the SD card connected to the Central Gateway after remotely gaining access to the vehicle's internal network."
				}
            ],
            "reference ID": ["RE0011"]
        },
		{
            "ID": "T5057",
            "name": "Adversary-in-the-Middle",
            "short_description": "Adversaries may intercept communication between vehicle systems or between the vehicle and external entities to collect sensitive data.",
            "full_description": "Adversaries may position themselves between communicating components, either within the vehicle (e.g., ECUs and gateways) or between the vehicle and external systems (e.g., backend servers, mobile apps, diagnostic tools). From this position, they can collect valuable information such as CAN messages, credentials, diagnostic data, and communication protocols. \n This technique can be used actively to support further attacks, such as replay or data injection. It often involves exploiting in-vehicle ECUs or external interfaces like Wi-Fi, Bluetooth, or cellular connections.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0009",
					"description": "Researchers used CARShark to collect traffic on the CAN bus to reveal how to control vehicle functions."
				},
				{
					"reference ID": "RE0016",
					"description": "Researchers collected logs and memory dumps from ECU for further investigation and forensic support."
				},				
				{
					"reference ID": "RE0016",
					"description": "Researchers actively collected CAN data between ECUs by listening from the Gateway to analyze CAN message IDs and data for further attacks."
				},
				{
					"reference ID": "RE0023",
					"description": "Researchers collected SSID and passphrase from HeadUnit to T-box by listening to the CAN bus. This information allowed them to connect to more TCP and UDP ports."
				}
            ],
            "reference ID": ["RE0009", "RE0016", "RE0023"]
        },
		{
            "ID": "T5058",
            "name": "Input Capture",
            "short_description": "Adversaries may capture data inputs exchanged between processes within the vehicle system to collect sensitive information.",
            "full_description": "Unlike traditional computer networks where input capture involves keyboards or mice, in automotive systems, `input` refers to any data transmitted between processes. This data typically comes from ECUs, sensors, or subsystems and flows through inter-process communication (IPC) or internal messaging services (like PPS or D-Bus). These channels exchange various types of information, including GPS coordinates, media settings, and control signals. \n If accessible, adversaries can exploit these interfaces to observe or intercept such inputs without detection.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [
                "M2001"
            ],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers exploited the exposed D-Bus and PPS services on the Uconnect system to capture GPS coordinates and other inter-process data, such as media control commands."
				}
            ],
            "reference ID": ["RE0014"]
        },
		{
            "ID": "T5059",
            "name": "Data from Cloud Storage",
            "short_description": "Adversaries may collect data from cloud-based services associated with vehicles.",
            "full_description": "Adversaries may exploit vulnerabilities in cloud-based services or associated applications to collect sensitive vehicle data, including GPS locations, vehicle status, personal information, and telemetry. \n They can gain unauthorized access through compromised credentials, insecure APIs, or vulnerabilities in third-party applications.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0037",
					"description": "Researchers discovered vulnerabilities in telematics systems that allowed unauthorized access to GPS data, personal information, and vehicle control functions."
				},
				{
					"reference ID": "RE0038",
					"description": "Researchers gained remote access to more than 25 Tesla vehicles worldwide by exploiting a vulnerability in a third-party application, enabling them to collect GPS data and execute commands."
				},
				{
					"reference ID": "RE0039",
					"description": "Researchers demonstrated how an API vulnerability enabled remote vehicle interaction and location data access."
				}
            ],
            "reference ID": ["RE0037", "RE0038", "RE0039"]
        },
		{
            "ID": "T5060",
            "name": "Communication Through Removable Media",
            "short_description": "Adversaries may perform command and control using removable media devices to transmit commands to a vehicle system.",
            "full_description": "Attackers can control compromised vehicle components or communicate between a compromised external device and the vehicle using removable media (e.g., OBD-II dongles, PassThru devices, or USB devices). These devices act as bridges to transmit commands, diagnostic messages, or malicious payloads when network segmentation or air-gapped systems prevent direct communication. \n This approach enables attackers to maintain control and send commands to vehicles without needing real-time wireless connections.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0010",
					"description": "Researchers used PassThru devices to compromise connected vehicles, perform diagnostics, and inject vehicle control commands."
				},
				{
					"reference ID": "RE0035",
					"description": "Researchers used wireless OBD-II dongles that connect directly to vehicle internal networks and communicate wirelessly with external applications to send vehicle control commands."
				}
            ],
            "reference ID": ["RE0010", "RE0035"]
        },
		{
            "ID": "T5061",
            "name": "Remote Access Software",
            "short_description": "Adversaries may use remote access software to establish command and control channels to in-vehicle systems.",
            "full_description": "In-vehicle systems contain command and control channels through pre-installed services (like Telnet, VNC, or manufacturer remote support tools) and third-party applications on connected devices such as smartphones. \n Attackers can exploit weak security configurations, including unauthenticated access and weak credentials to execute system commands or inject CAN messages. \n Once compromised, remote access software enables persistent access, allowing attackers to send commands to ECUs and orchestrate further attacks.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [ ],
            "example": [
                {
					"reference ID": "RE0024",
					"description": "Researchers executed arbitrary system commands from Tesla's Parrot module via an unauthenticated Telnet port."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers remotely injected CAN messages through a malicious application installed on the driver's smartphone."
				}
            ],
            "reference ID": ["RE0022","RE0024"]
        },
		{
            "ID": "T5062",
            "name": "Application Layer Protocol",
            "short_description": "Adversaries may use standard application-layer protocols to send commands to in-vehicle systems or maintain communication with compromised components.",
            "full_description": "In autonomous vehicles, attackers can use application-layer protocols like TCP, HTTP, IRC, or proprietary communication formats to establish command and control channels and transmit malicious messages. These protocols, operating at the application layer (OSI Layer 7), normally handle legitimate functions such as media control, system services, and OTA updates. \n Attackers embed malicious commands or payloads within this seemingly normal traffic to evade detection and bypass network filtering. \n Unlike the Remote Access Software technique, this approach specifically leverages the protocols themselves for communication, rather than using a complete remote-control interface.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
				{
					"reference ID": "RE0011",
					"description": "Researchers connected to a D-Bus daemon over TCP and invoked a remote method to open a reverse shell, allowing commands to be sent and received over the network using application-layer protocol communication."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers established an IRC-based command and control channel over a cellular network to broadcast and deliver control messages to the vehicle."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers remotely sent CAN injection commands via a smartphone application that communicated over 3G/4G networks using standard application-layer protocols."
				}
            ],
            "reference ID": ["RE0010", "RE0011", "RE0022"]
        },
		{
            "ID": "T5063",
            "name": "Spoof report message",
            "short_description": "Adversaries may spoof reporting messages in autonomous vehicle systems to mislead diagnostic tools, monitoring components, or safety checks",
            "full_description": "Reporting messages in AVs often include diagnostic responses, sensor health, or module status data used to determine system readiness and safety state.\n By replaying or injecting spoofed report messages, adversaries can create the illusion that a system is functioning normally when it is not. For example, spoofing a diagnostic message that reports a healthy airbag system may prevent safety alerts or inhibit protective actions. This can also support other techniques such as Alarm Suppression or Block Command Message by concealing true system conditions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0016",
					"description": "Researcher replayed normal diagnostic responses to emulate a healthy airbag system."
				}
            ],
            "reference ID": ["RE0016"]
        },
		{
            "ID": "T5064",
            "name": "Modify Parameter",
            "short_description": "Adversaries may modify parameters within control logic or embedded software to alter the behaviour of autonomous vehicle systems.",
            "full_description": "These parameters may influence decision thresholds, timing, or control responsiveness. For example, modifying PID controller gains during runtime can corrupt vehicle stability or trajectory following.\n  By adjusting these internal values, adversaries may cause the system to behave unpredictably, overreact, or underperform during critical operations.\n Unlike CAN injection or command message execution, which instruct the ECU from the outside, Modify Parameter alters the internal logic and how the ECU responds to those instructions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0015",
					"description": "Researcher injects malicious code into the control program, modifying PID controller parameters(e.g. proportional, integral and derivative gain) at runtime to corrupt vehicle stability and response."
				}
            ],
            "reference ID": ["RE0015"]
        },
		{
            "ID": "T5065",
            "name": "Alarm Suppression",
            "short_description": "Adversaries may target vehicle alarm systems to prevent them from notifying drivers or safety modules of abnormal or unsafe conditions.",
            "full_description": "Adversaries may suppress or tamper with vehicle alarm systems to prevent warnings from being triggered or noticed. \n In AVs, alarms may include seatbelt reminders, door ajar warnings, airbag malfunction indicators, brake system alerts, anti-theft notifications, check engine lights, and other dashboard related to safety-critical systems.\n Alarm suppression may involve injecting spoofed CAN messages, disabling ECU functions, tampering with memory values, or modifying firmware to hide the true state of the vehicle. \n By preventing visual, audible, or logged alerts, adversaries aim to inhibit operator response or safety system intervention.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
				{
					"reference ID": "RE0016",
					"description": "Researchers disable the airbag warning notification, leaving the vehicle occupants unprotected in case of an accident."
				},
                {
					"reference ID": "RE0016",
					"description": "Researcher inject `light OFF` commands to suppress the anti-theft system."
				}
            ],
            "reference ID": ["R0016"]
        },
		{
            "ID": "T5066",
            "name": "Block Command Message",
            "short_description": "Adversarials may block critical command messages in vehicle systems, preventing normal response functions and control actions from executing.",
            "full_description": "In autonomous vehicles, Electronic Control Units send these command messages through CAN, FlexRay, or Ethernet networks. \n Blocking can happen in two ways: through signal manipulation, where sensor interference prevents the control system from issuing commands, or through low-level bus attacks like CAN dominant override, which keeps the bus in a busy state to block all other traffic. \n When these commands can't reach their destinations, attackers can disable safety features, slow down system responses, or create dangerous conditions. \n Unlike Alarm Suppression, which merely hides warnings, Block Command Message prevents actual, legitimate messages from executing.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0019",
					"description": "Researchers demonstrated an Emergency Brake attack in which an autonomous vehicle misinterpreted spoofed data as an obstacle, triggering an emergency stop."
				},
				{
					"reference ID": "RE0021",
					"description": "Researchers demonstrated radar and ultrasonic sensor jamming attacks that prevented the autonomous vehicle from detecting real obstacles, potentially leading to collisions or failure to respond to genuine threats."
				},
				{
					"reference ID": "RE0034",
					"description": "Researchers used dominant-override mode in a CAN injector to block other CAN devices from transmitting. By maintaining a continuous dominant signal, the attacker prevented legitimate control messages from reaching their intended ECUs"
				}
            ],
            "reference ID": ["RE0019", "RE0021"]
        },
		{
            "ID": "T5067",
            "name": "Exfiltration Over other network medium",
            "short_description": "Adversaries may exfiltrate collected data over a different communication medium than the vehicle's primary network interface.",
            "full_description": "Attackers can bypass normal vehicle communication channels by exfiltrating data through alternative network paths. For instance, while a vehicle may typically communicate with cloud services via a telematics LTE module, attackers might exploit Wi-Fi, Bluetooth, or separate mobile network connections to steal data. \n This technique is particularly relevant in automotive systems when data theft occurs through channels outside the vehicle's monitoring systems. For example, a malicious app on the vehicle's Android system could funnel sensitive data to another app with Internet access, or an OBD-II-connected device could transmit CAN data through its own cellular connection.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0022",
					"description": "Researchers used a malicious self-diagnostic app and attacker's server to exfiltrate CAN data through the smartphone's mobile network (3G/4G/LTE), which differs from the typical vehicle backend network."
				},
				{
					"reference ID": "RE0045",
					"description": "Researchers demonstrated that third-party apps on Android Automotive can exploit system intents to force other apps with Internet access to leak data. This technique bypasses permission controls and enables data exfiltration without direct network access."
				}
            ],
            "reference ID": ["RE0022", "RE0045"]
        },
		{
            "ID": "T5070",
            "name": "Exfiltration Over C2 Channel",
            "short_description": "Adversaries may exfiltrate data using the same communication channel established for command and control (C2) purposes",
            "full_description": "In automotive environments, command and control (C2) channels may include cloud-based APIs (e.g., Tesla API), compromised telematics units over cellular networks, OBD-II-based interfaces, or custom protocols such as IRC. Once the C2 connection is active, attackers may retrieve GPS location, microphone recordings, fleet data or diagnostic information directly through the same pathway used to issue commands.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0038",
					"description": "Researcher used legitimate Tesla API credentials from third-party app misconfigurations to access multiple vehicles remotely. Through the same API channel, the attacker issued commands (e.g., unlock doors, disable sentry mode) and exfiltrated GPS location data."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers modified the telematics ECU to connect to an IRC server over a cellular data connection. The vehicle could then exfiltrate GPS location and in-cabin audio to the IRC server"
				}
            ],
            "reference ID": ["RE0010", "RE0038"]
        },
		{
            "ID": "T5068",
            "name": "Automated Exfiltration",
            "short_description": "Adversaries may exfiltrate collected data through automated mechanisms embedded in malicious code, using pre-defined intervals or triggers.",
            "full_description": "The data may include sensitive information like location, sensor logs, and cabin audio. Attackers can use automated routines embedded in malicious software deployed in AV systems. After collecting data from ECUs or sensors, the malicious code can initiate exfiltration at set intervals or specific triggers without requiring additional attacker interaction. \n This automated exfiltration can occur through cellular, Wi-Fi, or Internet-based channels via compromised telematics units, infotainment systems, or connected mobile applications. The malicious application may also delegate transmission to another component with network access to bypass permission controls. \n While this technique emphasizes automated exfiltration, it typically works in conjunction with other methods like Exfiltration Over C2 Channel or Exfiltration Over Other Network Medium.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0010",
					"description": "Researchers modified telematics exploit payload to download and run a small IRC client post-compromise. The code allows them to periodically “tweets” the GPS location of the vehicle and another that records cabin audio conversations and sends the recorded data to our servers over the Internet."
				},
				{
					"reference ID": "RE0045",
					"description": "Researchers developed a malicious app that records audio for every 5 seconds and automatically exfiltrates it to an attacker-controlled server using intent-based redirection. The app does not require Internet permission, however, it relied on other apps to carry out the transmission."
				}
            ],
            "reference ID": ["RE0010","RE0045"]
        },
		{
            "ID": "T5081",
            "name": "Denial of Control",
            "short_description": "Attackers can temporarily disrupt vehicle control by jamming or blocking communications, preventing commands from reaching their destination during the attack.",
            "full_description": "In autonomous vehicles, denial of control attacks aim to prevent targeted ECUs from executing or responding to commands during the active period of the attack. This can result from communication blocking, jamming, or exploiting CAN error-handling mechanisms to force the ECU into a bus-off state. \n Unlike 'Loss of Control', which reflects a sustained or unrecoverable inability to operate, denial of control is typically temporary and may be used to perform follow-up actions such as spoofing. \n Examples include sending high-priority CAN messages (e.g., with ID 0000) to monopolise the bus or injecting bit-level faults to exploit CAN's fault handling mechanism.\n This technique falls under the `Impact` tactic and may overlap with other techniques (Denial of Service); however, its core objective is to temporarily suppress the control of a specific function or ECU to enable further malicious activity.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0041",
					"description": "Researchers sent a CAN message with ID 0000, which is considered the highest priority. This prevented other packets from being transmitted, resulting in denial of the transmitted function."
				},
				{
					"reference ID": "RE0048",
					"description": "Researchers exploited error handling by injecting dominant bits during CAN message transmission to increment the transmitter's error counter. After 32 bit-level disruptions, the target ECU entered bus-off state, causing complete denial of control of the parking sensor module."
				},
				{
					"reference ID": "RE0049",
					"description": "Researchers performed a spoofing attack by first inducing bus-off state on a target ECU using dominant bit flooding in one CAN frame. After the legitimate ECU was silenced, they injected spoofed messages with matching timing and ID."
				},
				{
					"reference ID": "RE0050",
					"description": "Researchers demonstrated a stealthy bus-off attack by injecting recessive bits during dominant bits in a target ECU's message. The victim ECU's transmit error counter increased to 255, causing it to enter bus-off state and fully disable its communication while the attacker remained active."
				}
            ],
            "reference ID": ["RE0041","RE0048","RE0049", "RE0050"]
        },
		{
            "ID": "T5069",
            "name": "Denial of Service",
            "short_description": "Adversaries may disrupt the availability of vehicle systems by overwhelming networks or exhausting system resources, leading to degraded or lost functionality.",
            "full_description": "In autonomous vehicles, denial of service attacks aim to make systems or components temporarily or permanently unavailable. These attacks may target in-vehicle networks (e.g., CAN), external communication links (e.g., telematics or control centre), or endpoint devices such as ECUs and ROS nodes. \n The result may be lost control, delayed response, or system crash. Unlike other impacts that modify behaviour or inject commands, DoS prevents normal operation altogether.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": ["T5069.001", "T5069.002"],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0001",
					"description": "Researchers mention that a broadcast storm can disable communication channels and disrupt the control system."
				},
				{
					"reference ID": "RE0003",
					"description": "Researchers describe a network flooding attack between ground control systems and Field Personal Digital Devices that disrupts normal functioning."
				},
				{
					"reference ID": "RE0005",
					"description": "Flooding the network with fake UDP packets causes latency and disconnects telemetry and video feed."
				},
				{
					"reference ID": "RE0005",
					"description": "Overloading hardware resources (CPU, RAM, or disk) through excessive requests degrades system performance."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers send crafted CAN messages to the Power Steering Control Module to overload the CAN network and disable steering control."
				}
            ],
            "reference ID": ["RE0001","RE0003","RE0005", "RE0041"]
        },
		{
            "ID": "T5072",
            "name": "Manipulation of Control",
            "short_description": "Adversaries may manipulate vehicle control functions by injecting malicious commands, altering sensor inputs, or modifying firmware to override normal operations.",
            "full_description": "Adversaries may interfere with control processes to change the vehicle’s behaviour without driver intent. This can involve injecting CAN messages, spoofing sensor data, or modifying firmware to issue unauthorised commands to critical systems such as throttle, brake, steering, or navigation. \n These attacks allow adversaries to redirect movement, disable safety actions, or control the vehicle remotely. \n Unlike Loss of Control, which disables functionality, Manipulation of Control alters the vehicle’s operation by actively issuing false or malicious instructions.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
				{
					"reference ID": "RE0001",
					"description": "Researchers noted that GPS jamming and spoofing attacks could redirect an aircraft and cause unintended landings."
				},
				{
					"reference ID": "RE0004",
					"description": "Researchers overwrote velocity control commands to alter the UGV’s navigation path."
				},
				{
					"reference ID": "RE0005",
					"description": "Researchers disabled the emergency stop function and changed the UGV’s movement direction."
				},
				{
					"reference ID": "RE0006",
					"description": "Researchers identified unauthenticated command and control data as a major vulnerability in UGV systems."
				},
				{
					"reference ID": "RE0009",
					"description": "Researchers manipulated throttle values and disrupted steering functionality in the test vehicle."
				},
				{
					"reference ID": "RE0010",
					"description": "Researchers injected malicious CAN messages to control critical units such as the braking system."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers injected malicious CAN messages to disable systems like ESP and ABS, and manipulate functions such as door unlocking."
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers manipulated body control functions by injecting malicious CAN messages."
				}
            ],
            "reference ID": ["RE0001","RE0004", "RE0005", "RE0006","RE0009","RE0010", "RE0011", "RE0012", "RE0013", "RE0014","RE0016"]
        },
		{
            "ID": "T5073",
            "name": "Loss of control",
            "short_description": "Adversaries can cause vehicles to experience persistent loss of control, where critical functions remain unresponsive even after the initial interference has stopped.",
            "full_description": "This can happen when a function is overridden by injected firmware, disrupted by crafted diagnostic commands, or when communication is blocked in a way that prevents system recovery.\n This differs from Denial of Control, which typically results from temporary network jamming or communication blocks that stop commands from reaching their targets but may recover when interference ends. It also differs from Manipulation of Control, where attackers actively inject commands to steer or control the vehicle in a specific way. In Loss of Control, the system or function cannot be controlled at all. This can lead to severe safety risks, as the vehicle may be unable to move or respond to any input.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0002",
					"description": "Researchers observed that disrupting communication or spoofing signals caused the unmanned system to lose functionality."
				},	
				{
					"reference ID": "RE0012",
					"description": "Researchers patched CID firmware to implement custom control of the Body Control Module."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers sent reset commands to ECUs that caused the vehicle to lose control and temporarily disabled functions."
				}
            ],
            "reference ID": ["RE0002", "RE0012", "RE0013"]
        },
		{
            "ID": "T5074",
            "name": "Loss of Safety",
            "short_description": "Adversaries may compromise safety-critical functions by disabling systems or allowing dangerous conditions to persist undetected.",
            "full_description": "Adversaries may target and disable safety system functions designed to protect vehicles during abnormal or hazardous conditions. These functions include the airbag system, anti-lock braking system, emergency braking, traction control, and autonomous driving modules such as ADAS or Autopilot. \n By injecting malicious firmware, disabling safety checks, or concealing system failures, attackers can prevent vehicles from responding appropriately to unsafe scenarios. \n Loss of safety differs from Loss of Protection because Loss of Safety directly affects a vehicle's ability to perform critical safety actions while Loss of Protection affects a vehicle's ability to detect or mitigate threats. \n Disabling or bypassing these safety functions can lead to catastrophic outcomes, including undetected system failures, unsafe operation, and physical harm. This technique can also serve as a stepping stone for further attacks or magnify the impact of other system compromises.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0016",
					"description": "Researchers concealing airbag system missing, make the vehicle run normally even when airbag system is missing."
				},
				{
					"reference ID": "RE0009",
					"description": "Researchers disable safety critical functions, such as locked wheels and release the brakes and prevent them from being enabled."
				},
				{
					"reference ID": "RE0012",
					"description": "Researchers inject custom firmware in Autopilot can cause safety issuse in autonomous driving mode."
				}
            ],
            "reference ID": ["RE0009", "RE0016","RE0012"]
        },
		{
            "ID": "T5075",
            "name": "Loss of protection",
            "short_description": "Adversaries may disable or degrade protective systems in autonomous vehicles, leaving the vehicle vulnerable to faults, hazards, or attacks.",
            "full_description": "Adversaries may target and compromise protective systems that safeguard vehicles and their occupants. These systems include safety-critical components such as alarming system, and intrusion detection systems (IDS). \n By disabling or degrading these protections, attackers can create unsafe conditions, enable undetected attacks, and increase the risk of harm. \n This technique often serves to enable further malicious actions or ensure that faults and abnormal conditions remain undetected. The consequences can include physical damage, safety hazards, and service disruption.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": ["T5004.002"],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0016",
					"description": "Researchers disable the airbag warning notification, leaving the vehicle occupants unprotected in case of an accident."
				},
				{
					"reference ID": "RE0016",
					"description": "Researchers suppress the anti-theft system by inject light OFF commands."
				},
				{
					"reference ID": "RE0028",
					"description": "Researchers examined adversarial attacks on two IDS models: a Deep Neural Network (DNN) and a Multi-Tier Hybrid IDS (MTH-IDS). The adversarial messages altered only the data payload fields (D0–D7) while maintaining CAN IDs and DLC values unchanged. The study observed a high attack success rate, with up to 52.34% of normal frames being misclassified as malicious."
				},				
				{
					"reference ID": "RE0026",
					"description": "Researchers evaluated machine learning and deep learning-based IDSs against adversarial examples designed to appear normal while containing attacks. The results demonstrate that ML-based IDS models are vulnerable to adversarial data manipulation."
				}
            ],
            "reference ID": ["RE0016","RE0026", "RE0027", "RE0028"]
        },		
		{
            "ID": "T5077",
            "name": "Device Theft (new)",
            "short_description": "Adversaries may steal a vehicle by exploiting weaknesses in access and authentication systems, allowing them to unlock, start, and drive away without authorisation",
            "full_description": "Adversaries may physically steal vehicles by bypassing or compromising access control mechanisms. Modern vehicles rely on digital key systems, including Remote Keyless Entry and immobilizers, which are vulnerable to wireless or diagnostic-based attacks. \n After gaining access, attackers often manipulate internal systems, such as reprogramming the ECU or disabling tracking modules to complete the theft and prevent vehicle recovery. \n This technique involves unauthorized physical acquisition of the vehicle, typically resulting in complete loss of the asset. Beyond financial losses, the impact includes potential tampering with internal systems.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": ["T5077.001"],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0032",
					"description": "Researchers demonstrated that OBD port scan attacks allow attackers to extract the entire memory state of the key fob and clone it to unlock the car."
				},
				{
					"reference ID": "RE0033",
					"description": "Researchers demonstrated serious vulnerabilities in the Hitag2-based immobilizer system and showed that vehicles using this system can be stolen in under 6 minutes."
				},
				{
					"reference ID": "RE0031",
					"description": "Researchers gained unauthorized access to vehicles by exploiting weaknesses in cryptographic implementations of Remote Keyless Entry systems, specifically in VW Group's RKE system and the Hitag2 rolling code system. By eavesdropping on the rolling code, they could generate valid codes to unlock the car and replay them for unauthorized access."
				}
            ],
            "reference ID": ["RE0030", "RE0031", "RE0032", "RE0033"]
        },
		{
            "ID": "T5078",
            "name": "Data Destruction",
            "short_description": "Adversaries may destroy or corrupt data in autonomous vehicles to disrupt functionality or erase critical information.",
            "full_description": "Data destruction in autonomous vehicles involves deliberately erasing or corrupting firmware, memory, or sensitive operational data. This can happen through buffer overflow attacks, malicious firmware updates, or remote data-clearing commands. \n For safety-critical or military systems, data destruction can serve as a protective measure against information theft when vehicles are compromised. \n Unlike enterprise systems where data wiping typically affects files, autonomous vehicle data destruction focuses on critical components like firmware, cryptographic keys, and control data that are essential for operation and security.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0003",
					"description": "Researchers show that buffer overflow vulnerabilities in the stack and heap areas of main memory can cause memory to be overwritten and destroyed, potentially leading to data loss."
				},
				{
					"reference ID": "RE0002",
					"description": "Researchers designed a method to automatically or remotely erase sensitive cryptographic data if the AV is stolen or lost."
				}
            ],
            "reference ID": ["RE0002","RE0003"]
        },
		{
            "ID": "T5079",
            "name": "Loss of View",
            "short_description": "Adversaries may disrupt or manipulate the vehicle’s display systems, hiding real-time operational data and impairing driver awareness",
            "full_description": "Adversaries may cause a loss of view by disrupting or altering the vehicle's human-machine interface, including displays on the head unit, infotainment system, or instrument cluster (e.g. speedometer). This can be achieved by injecting crafted CAN messages, modifying firmware, or issuing remote commands. \n Loss of view results in the driver or operator being unable to see accurate or complete system states, such as speed, warnings, navigation, or diagnostic alerts, even though the physical functions may still be operating. \n Unlike attacks that directly affect control, Loss of View targets situational awareness, impairing the human or automated system’s ability to understand and react to the vehicle’s true status.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0014",
					"description": "Researchers inject images into the Uconnect display, preventing it from showing normal values."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers inject messages to alter the speedometer display to show any value, making the real value invisible."
				}
            ],
            "reference ID": ["RE0014","RE0041"]
        },
		{
            "ID": "T5080",
            "name": "Theft of Operational Information",
            "short_description": "Adversaries may steal operational data from autonomous vehicles or back-end systems to gain insight into vehicle activity, ownership, or fleet operations.",
            "full_description": "Adversaries may target and extract operational information like location history, vehicle identification numbers (VINs), user account details, API tokens, maintenance records, and fleet tracking data. They can obtain these details by exploiting vulnerabilities in APIs, mobile applications, telematics services, or back-end systems. \n The stolen data enables multiple malicious activities: surveillance, vehicle behavior profiling, social engineering, and follow-on attacks including remote control, impersonation, or physical theft. For instance, stolen API tokens and user accounts may allow adversaries to issue unauthorized commands or gain additional remote access to vehicle functions. \n In mission-critical or classified vehicle environments, compromised operational data can reveal sensitive details like movement patterns, mission status, or deployment information.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0038",
					"description": "Researchers can querry the possition history of Tesla vehicle through API and third-party dashboard."
				},
				{
					"reference ID": "RE0040",
					"description": "Researchers can querry name, address, phone number, email address, tax ID, and vehicle/service/ownership history of Toyota car."
				},
				{
					"reference ID": "RE0039",
					"description": "Researchers can get the VIN number, API token and other personally identifiable information related to the vehicle."
				}
            ],
            "reference ID": ["RE0038","RE0039","RE0040"]
        }
    ],
    "sub-techniques": [
		{
            "ID": "T5005.001",
            "name": "LIDAR Spoofing and Replay",
            "short_description": "Adversaries may spoof or replay LIDAR signals to inject false objects or alter depth perception.",
            "full_description": "LIDAR spoofing and replay attacks exploit the system’s reliance on laser-based sensing to manipulate object detection and depth perception. Spoofing attacks introduce false LIDAR pulses that create phantom objects or alter measured distances, misleading the vehicle’s perception of its surroundings. Replay attacks involve capturing genuine LIDAR signals and retransmitting them with a delay or from a different location, causing incorrect environmental mapping. \n The impact of these attacks includes misleading obstacle detection, incorrect navigation decisions, and potential safety risks. However, LIDAR attacks typically affect only the perception layer and do not directly compromise other vehicle systems unless the false data is misinterpreted at higher decision-making levels.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0017",
                    "description": "LIDAR Replay Attack - Researchers intercept and retransmit LiDAR pulses from a different location, creating false reflections at unintended positions."
                },
				{
                    "reference ID": "RE0017",
                    "description": "LIDAR Spoofing Attack - Researchers use a pulse generator to synchronize with the LiDAR's scan cycle and inject false echoes, tricking the system into detecting nonexistent obstacles."
                }
            ],
            "reference ID": ["RE0017"]
        },
		{
            "ID": "T5005.002",
            "name": "Ultrasonic Spoofing",
            "short_description": "Adversaries may inject synthetic ultrasonic signals to create false obstacle detections.",
            "full_description": "Ultrasonic sensors are used for short-range detection and collision avoidance. These sensors can be exploited through three main techniques: spoofing, jamming, and blinding. In spoofing attacks, attackers transmit false ultrasonic signals to create fake object detections or alter measured distances, deceiving the vehicle about nearby obstacles. This attack can have serious consequences—vehicles may fail to detect obstacles, measure distances incorrectly, or face collision risks. However, ultrasonic attacks typically remain limited to the perception system and don't affect other vehicle systems or decision-making processes.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation ID": [],
            "example": [
				{
                    "reference ID": "RE0021",
                    "description": "Ultrasonic Spoofing attack - Researchers injects synthetic ultrasonic signals with modified frequency modulation patterns to create false object detections or alter measured distances."
                }
            ],
            "reference ID": [ "RE0021"]
        },
		{
            "ID": "T5005.003",
            "name": "RADAR Spoofing and Replaying",
            "short_description": "Adversaries may inject or replay radar signals to mislead object detection.",
            "full_description": "Radar is a sensor in autonomous vehicles for detecting objects, measuring distances, and enabling adaptive cruise control. Spoofing involves sending fake radar signals to create false detections or wrong distance measurements. Replay attacks work by capturing real radar signals and sending them back with changes or delays, creating phantom objects or incorrect distance readings. \n These attacks can degrade object detection, distort the vehicle's perception of its surroundings, and cause navigation errors. \n While modern automotive radar systems, including millimeter-wave radar are built to resist interference, these attacks remain a threat mainly to the vehicle's perception system and do not directly affect other critical vehicle componentss",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation ID": [],
            "example": [
				{
                    "reference ID": "RE0021",
                    "description": "Millimeter-Wave Radar Spoofing attack - Researchers injects synthetic radar signals with altered frequency modulation patterns, tricking the radar into detecting false objects or incorrect distances."
                },
				{
                    "reference ID": "RE0021",
                    "description": "Millimeter-Wave Radar Replaying attack - Researchers captures and retransmits radar signals with a delay, creating ghost objects at manipulated distances to deceive obstacle detection systems.."
                }
            ],
            "reference ID": ["RE0021"]
        },
		{
            "ID": "T5005.004",
            "name": "Motion and Position Sensors",
            "short_description": "Adversaries may manipulate motion and position sensors to alter a vehicle's perceived state.",
            "full_description": "Adversaries may spoof or disrupt motion and position sensors such as IMUs (gyroscope, accelerometer, magnetometer) or GPS to mislead the vehicle’s state estimation systems. \n These attacks can be conducted externally, without accessing the internal network, and often serve as the initial vector for follow-on impact such as control deviation or mission failure.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0015",
                    "description": "Researchers injected false inertial sensor readings during flight, causing incorrect roll estimation and crash of the quadrotor."
                },
				{
                    "reference ID": "RE0015",
                    "description": "Researchers spoofed GPS signals to cause the ground vehicle to deviate from its planned mission and fail to return to home base."
                }
            ],
            "reference ID": ["RE0015"]
        },
		{
            "ID": "T5006.001",
            "name": "CAMERA Blinding or confusing",
            "short_description": "Adversaries may manipulate camera sensors using light-based interference to degrade object detection and perception accuracy.",
            "full_description": "In a CAMERA blinding or confusing attack, adversaries exploit the vulnerabilities of camera-based perception by using intense light sources or rapid light bursts. The impact of this attack includes failure to detect lane markings, obstacles, and traffic signs, leading to potential navigation errors or safety risks. Additionally, repeated exposure to high-intensity light may degrade the sensor’s long-term performance. \n However, this type of attack typically affects only the camera itself and does not propagate further into the vehicle’s internal systems, as the interference is limited to the sensor’s ability to capture and process visual data",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0017",
                    "description": "CAMERA Binding Attack - Researchers uses laser diodes and LEDs to emit intense light directly into the camera's sensor to prevent object detection."
                },
				{
                    "reference ID": "RE0017",
                    "description": "CAMERA Confusing Attack - Researchers use rapid bursts of light to force the camera to continuously adjust exposure settings, creating time lag in the auto-adjustment process and causing missed object detection."
                },
				{
                    "reference ID": "RE0021",
                    "description": "CAMERA Binding Attack - Researchers uses three different light sources to temporarily or permanently blind the vehicle’s camera, obstructing recognition of lane markings, traffic signs, and obstacles."
                }
				
            ],
            "reference ID": ["RE0017", "RE0021"]
        },		
		{
            "ID": "T5006.002",
            "name": "Ultrasonic Jamming and Blinding",
            "short_description": "Adversaries may jam ultrasonic sensors with noise or block them physically to impair obstacle detection.",
            "full_description": "Ultrasonic sensors are used for short-range detection and collision avoidance. Jamming attacks use constant high-frequency noise to overwhelm the sensor, preventing it from working properly. Blinding attacks use thin objects or acoustic materials to physically block the sensor, making it unable to detect obstacles. \n These attacks can cause serious problems: the vehicle may fail to detect obstacles, measure distances incorrectly, or face collision risks. Yet ultrasonic attacks typically stay limited to the perception system and don't affect other vehicle systems or decision-making processes.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0018",
                    "description": "Ultrasonic Blinding attack - Researchers disrupting sensor accuracy by covering sensors or using thin objects or acoustic materials."
                },
				{
                    "reference ID": "RE0021",
                    "description": "Ultrasonic Jamming attack - Researchers uses an Arduino-based device to continuously transmit high-frequency sound waves, disrupting ultrasonic sensor function and preventing obstacle detection."
                }
            ],
            "reference ID": ["RE0018", "RE0021"]
        },
		{
            "ID": "T5006.003",
            "name": "RADAR Jamming",
            "short_description": "Adversaries may transmit strong signals to jam RADAR, causing loss of detection.",
            "full_description": "Radar is a sensor in autonomous vehicles for detecting objects, measuring distances, and enabling adaptive cruise control. Jamming overwhelms the system with powerful electromagnetic interference, preventing it from detecting obstacles. \n These attacks can degrade object detection, distort the vehicle's perception of its surroundings, and cause navigation errors. \n While modern automotive radar systems, including millimeter-wave radar are built to resist interference, these attacks remain a threat mainly to the vehicle's perception system and do not directly affect other critical vehicle componentss",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0021",
                    "description": "Millimeter-Wave Radar Jamming attack - Researchers transmit high-power electromagnetic signals to interfere with the vehicle’s radar system, preventing accurate object detection."
                }
            ],
            "reference ID": ["RE0021"]
        },		
		{
            "ID": "T5004.001",
            "name": "Adversarial Sensor Attack",
            "short_description": "Adversaries may deceive ML-based perception systems by manipulating sensor inputs using adversarial machine learning techniques, misleading object detection and navigation systems.",
            "full_description": "Sensor adversarial attacks target the AI-based perception models used in autonomous vehicles by introducing carefully crafted perturbations or manipulated sensor inputs. Unlike traditional sensor manipulation attacks that interfere with raw signals (e.g., jamming or spoofing), adversarial attacks focus on exploiting weaknesses in deep learning models used for sensor data interpretation. By misleading object detection and classification algorithms, these attacks can cause incorrect navigation decisions, including abrupt braking, lane deviation, or obstacle misidentification.\n Adversarial sensor attacks remain a serious threat, particularly in scenarios where vehicles rely heavily on deep learning-based perception. ",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0025",
                    "description": "Reseachers using physical adversarial patches in the form of road decals to mislead object detection systems in autonomous vehicles, causing incorrect object recognition and disrupt AV navigation."
                },
				{
					"reference ID": "RE0019",
					"description": "Researchers demonstrated an adversarial sensor attack on LiDAR-based perception. The attack created false 'front-near obstacles' within five meters, causing incorrect driving decisions such as emergency braking or vehicle freezing at intersections. "
				},
				{
					"reference ID": "RE0020",
					"description": "Reseachers injected manipulated point cloud data to create phantom vehicles or distort depth perception, misleading the AV’s navigation system."
				}
            ],
            "reference ID": ["RE0021"]
        },
		{
            "ID": "T5004.002",
            "name": "Adversarial IDS attack",
            "short_description": "Adversaries may evade ML-based Intrusion Detection Systems (IDSs) by manipulating IDS inputs using adversarial machine learning techniques, causing misclassification of network traffic.",
            "full_description": "IDS adversarial attacks target machine learning-based IDS in Autonomous Vehicles. These attacks generate specially crafted adversarial data to manipulate the IDS into misclassifying network traffic, either by evading detection (misclassifying attacks as normal) or triggering false alarms (misclassifying normal traffic as attacks).\n These attacks exploit vulnerabilities in IDS models trained on vehicle network data. \n The impact of IDS adversarial attacks includes decreased detection accuracy, increased false positive rates, and operational instability, potentially leading to unnecessary security responses or masking real threats.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0026",
					"description": "Researchers evaluated machine learning and deep learning-based IDSs against adversarial examples designed to appear normal while containing attacks. The results demonstrate that ML-based IDS models are vulnerable to adversarial data manipulation."
				},
				{
					"reference ID": "RE0027",
					"description": "Researchers tested adversarial attacks on ML-based IDS models, including Deep Neural Network (DNN), Decision Tree (DT), Random Forest (RF), Extra Trees (ET), and XGBoost. Findings indicate that these IDS models are highly susceptible to adversarial perturbations, leading to significant misclassification of network traffic."
				},
				{
					"reference ID": "RE0028",
					"description": "Researchers examined adversarial attacks on two IDS models: a Deep Neural Network (DNN) and a Multi-Tier Hybrid IDS (MTH-IDS). The adversarial messages altered only the data payload fields (D0–D7) while maintaining CAN IDs and DLC values unchanged. The study observed a high attack success rate, with up to 52.34% of normal frames being misclassified as malicious."
				}
            ],
            "reference ID": ["RE0026", "RE0027", "RE0028"]
        },
		{
            "ID": "T5007.001",
            "name": "Rogue Ground Station",
            "short_description": "Adversaries may deploy rogue ground stations to gain unauthorized access to UGVs through wireless communications.",
            "full_description": "These attacks exploit the communication channels between a vehicle and its legitimate ground station. \n Using rogue ground stations, attackers can inject, override, or replay control packets to alter UGV paths, cancel missions, or prevent data collection. These attacks are conducted purely over-the-air without requiring access to the vehicle's internal systems, typically within physical range (e.g., line-of-sight or directed antenna cone).",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0024",
                    "description": "Researchers sends deauthentication frames to disconnect the Tesla from its Wi-Fi network"
                }
            ],
            "reference ID": []
        },
		{
            "ID": "T5007.002",
            "name": "Rogue Cellular Base Station",
            "short_description": "Adversaries may set up a rogue cellular base station (fake bts or femtocell) to intercept or manipulate vehicle telematics communication. A compromised femtocell can also allow direct interaction with a vehicle’s telematics system by bypassing carrier network restrictions",
            "full_description": "By masquerading as a legitimate tower, attackers can downgrade security protocols, intercept authentication data, or inject malicious commands, potentially compromising remote services or firmware updates.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [
                "M2001"
            ],
            "example": [
                {
                    "reference ID": "RE0013",
                    "description": "Researchers used a rogue GSM base station to intercept TCP messages and escalate access to BMW’s NBT Head Unit and Telematic Communication Box (TCB)."
                },
				{
                    "reference ID": "RE0014",
                    "description": "Researchers modified a Sprint Airave femtocell to communicate directly with Uconnect over Sprint’s network to demonstrate remote exploitation of the infotainment system."
                }
            ],
            "reference ID": ["RE0013", "RE0014"]
        },
		{
            "ID": "T5007.003",
            "name": "Rogue Wi-Fi Access Point",
            "short_description": "Adversaries may set up rogue Wi-Fi access points to perform man-in-the-middle (MitM) attacks, intercept credentials, or inject malicious firmware into vehicle systems. By spoofing trusted networks, such as those used for OTA updates, diagnostics, or infotainment, attackers can perform man-in-the-middle (MitM) attacks and capture authentication credentials.",
			"full_description": "By compromising a vehicle’s wireless entry point, adversaries can establish an initial foothold, enabling further attack techniques such as remote code execution, firmware manipulation, and CAN message injection. This can lead to deeper system compromise, allowing attackers to escalate privileges, persist within the system, or disrupt vehicle operations.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0011",
                    "description": "Researchers spoofed Tesla Guest Wi-Fi, a trusted network used by Tesla body shops and superchargers, to trick vehicles into auto-connecting. By redirecting browser traffic, they found out the vulnerabilities in QtCarBrowser."
                },
				{
                    "reference ID": "RE0012",
                    "description": "Researchers spoofed Tesla Guest Wi-Fi, a trusted network used by Tesla body shops and superchargers, to trick vehicles into auto-connecting. By redirecting browser traffic, they could exploit zero-day vulnerabilities in QtCarBrowser."
                }
            ],
            "reference ID": ["RE0011", "RE0012"]
        },
		{
            "ID": "T5007.004",
            "name": "Downgrade to Insecure Protocols",
            "short_description": "Adversaries may force a vehicle’s wireless interfaces to switch to weaker communication protocols, reducing security protections. This can be achieved by jamming high-security protocols (e.g., LTE) and allowing only older, vulnerable protocols (e.g., GSM).",
            "full_description": " Attackers can then exploit the downgraded channel to intercept, manipulate, or inject malicious communications, potentially compromising remote vehicle services or authentication mechanisms.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0023",
                    "description": "Researchers downgraded a vehicle’s T-Box from LTE to GSM using a rogue base station (USRP + OpenBTS), enabling them to intercept GSM text messages."
                }
            ],
            "reference ID": ["RE0023"]
        },
		{
            "ID": "T5007.005",
            "name": "Jamming or Denial of Service",
            "short_description": "Adversarials may jam radio signals, such as Wi-Fi, cellular, GPS to prevent the vehicle from communicating.",
            "full_description": "This technique involves disrupting or exploiting wireless communication channels integral to vehicle operations. By targeting these channels, attackers can interfere with or gain unauthorized access to vehicle systems, leading to potential control over vehicle functionalities or denial of essential services.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
                    "reference ID": "RE0024",
                    "description": "Researchers sends deauthentication frames to disconnect the Tesla from its Wi-Fi network"
                }
            ],
            "reference ID": ["RE0024"]
        },		
		{
            "ID": "T5007.005",
            "name": "Remote Key Entry (new)",
            "short_description": "Adversaries may exploit vulnerabilities in Remote Keyless Entry systems to gain unauthorized access to vehicles.",
            "full_description": "Remote Key Entry attacks exploit weaknesses in Remote Keyless Entry (RKE) systems, allowing attackers to unlock and sometimes start a vehicle without the owner’s key. These systems rely on radio frequency communication between the key fob and the vehicle, but vulnerabilities in signal transmission and cryptographic protocols make them susceptible to exploitation. \n There are three main types of key fob attacks. Relay attacks involve intercepting and amplifying the key fob signal in real-time, tricking the car into believing the key is nearby. Replay attacks capture and store rolling codes transmitted by the key fob and replay them later to gain unauthorized access. Key fob reprogramming exploits the vehicle’s OBD-II port to add a new key while disabling the original, allowing attackers to take control of the vehicle permanently. \n The impact of these attacks extends beyond unauthorized entry. Attackers can leverage the OBD-II port to inject malicious firmware, disable security features, or extract sensitive authentication data.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
				{
					"reference ID": "RE0029",
					"description": "Researchers conducted experiments with 8 different cars and 2 different jammers to disrupt the Remote Keyless Entry systems, causing the cars to remain unlocked."
				},
                {
					"reference ID": "RE0030",
					"description": "Researchers constructed two relay attack setups on 10 car models from 8 manufacturers, using both a wired physical-layer relay and a wireless radio frequency relay, to successfully open and start vehicles while the key remained physically far from the car."
				},
				{
					"reference ID": "RE0031",
					"description": "Researchers gained unauthorized access to vehicles by exploiting weaknesses in cryptographic implementations of Remote Keyless Entry systems, specifically in VW Group's RKE system and the Hitag2 rolling code system. By eavesdropping on the rolling code, they could generate valid codes to unlock the car and replay them for unauthorized access."
				},
				{
					"reference ID": "RE0032",
					"description": "Researchers demonstrated that OBD port scan attacks allow attackers to extract the entire memory state of the key fob and clone it to unlock the car."
				},
				{
					"reference ID": "RE0033",
					"description": "Researchers demonstrated serious vulnerabilities in the Hitag2-based immobilizer system and showed that vehicles using this system can be stolen in under 6 minutes."
				}
            ],
            "reference ID": ["RE0029","RE0030", "RE0031", "RE0032", "RE0033"]
        },
        {
            "ID": "T5014.001",
            "name": "Via CD",
            "short_description": "Adversaries may use a CD containing crafted media files to trigger unintended behaviour in the infotainment system and inject malicious messages into in-vehicle networks.",
            "full_description": "Vehicles with CD-based infotainment systems may interpret malformed or specially encoded audio files in unexpected ways. While the content may appear legitimate on consumer devices, specific players in vehicle could misinterpret such files and perform unintended operations—such as sending CAN packets.",
            "created": "03/01/2023",
            "modified": "03/01/2024",
            "mitigation ID": [],
            "example": [
                 {
					"reference ID": "RE0010",
					"description": "Researchers used a CD with a modified WMA audio file, which plays normally on a PC but sends arbitrary CAN packets when played by the vehicle's media player"
				}
            ],
            "reference ID": ["RE0010"]
        },
        {
            "ID": "T5014.002",
            "name": "Via USB",
            "short_description": "Adversaries may deliver malicious update files or media via USB to compromise infotainment or other internal systems of the vehicle, or to establish persistence.",
            "full_description": "USB ports are commonly used for firmware update in modern vehicles. If proper file validation or cryptographic signing is not enforced, adversaries may exploit this update mechanism to inject malicious code, alter system behaviour, or gain a persistent foothold. This can occur by inserting a modified USB drive with manipulated update packages, or by swapping a legitimate update device mid-process. \n This sub-technique remains relevant even in newer models and represents a practical physical vector for in-vehicle exploitation.",
            "created": "04/01/2023",
            "modified": "04/01/2024",
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0010",
					"description": "Researchers inserted a USB stick with a valid ISO to initiate an update, then replaced it with a modified ISO to force a malicious update."
				},
				{
					"reference ID": "RE0013",
					"description": "Researchers inserted a USB stick with a crafted manage_upd.nzdf file to force the HU-Intel system's navigation map to update with the malicious file."
				}
            ],
            "reference ID": ["RE0010", "RE0013"]
        },
        {
            "ID": "T5077.001",
            "name": "Remote Key Entry (new)",
            "short_description": "Adversaries may exploit vulnerabilities in Remote Keyless Entry systems to gain unauthorized access to vehicles.",
            "full_description": "Remote Key Entry attacks exploit weaknesses in Remote Keyless Entry (RKE) systems, allowing attackers to unlock and sometimes start a vehicle without the owner’s key. These systems rely on radio frequency communication between the key fob and the vehicle, but vulnerabilities in signal transmission and cryptographic protocols make them susceptible to exploitation. \n There are three main types of key fob attacks. Relay attacks involve intercepting and amplifying the key fob signal in real-time, tricking the car into believing the key is nearby. Replay attacks capture and store rolling codes transmitted by the key fob and replay them later to gain unauthorized access. Key fob reprogramming exploits the vehicle’s OBD-II port to add a new key while disabling the original, allowing attackers to take control of the vehicle permanently. \n The impact of these attacks extends beyond unauthorized entry. Attackers can leverage the OBD-II port to inject malicious firmware, disable security features, or extract sensitive authentication data.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0030",
					"description": "Researchers constructed two relay attack setups on 10 car models from 8 manufacturers, using both a wired physical-layer relay and a wireless radio frequency relay, to successfully open and start vehicles while the key remained physically far from the car."
				},
				{
					"reference ID": "RE0031",
					"description": "Researchers gained unauthorized access to vehicles by exploiting weaknesses in cryptographic implementations of Remote Keyless Entry systems, specifically in VW Group's RKE system and the Hitag2 rolling code system. By eavesdropping on the rolling code, they could generate valid codes to unlock the car and replay them for unauthorized access."
				},
				{
					"reference ID": "RE0032",
					"description": "Researchers demonstrated that OBD port scan attacks allow attackers to extract the entire memory state of the key fob and clone it to unlock the car."
				},
				{
					"reference ID": "RE0033",
					"description": "Researchers demonstrated serious vulnerabilities in the Hitag2-based immobilizer system and showed that vehicles using this system can be stolen in under 6 minutes."
				}
            ],
            "reference ID": ["RE0030", "RE0031", "RE0032", "RE0033"]
        },
		{
            "ID": "T5069.001",
            "name": "Network Denial of Service",
            "short_description": "Adversaries may flood internal or external vehicle networks to disrupt communication and degrade system availability.",
            "full_description": "Network DoS attacks in AVs can overwhelm communication channels such as CAN, Ethernet, or telematics links by injecting excessive or malformed traffic. This can prevent critical messages from reaching their destination, cause timeouts, or lead to temporary loss of control. \n Examples include broadcast storms, UDP flooding, or remote saturation of the vehicle’s communication with cloud or control infrastructure.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
                {
					"reference ID": "RE0001",
					"description": "Researchers mention that a broadcast storm can disable communication channels and disrupt the control system."
				},
				{
					"reference ID": "RE0003",
					"description": "Researchers describe a network flooding attack between ground control systems and Field Personal Digital Devices that disrupts normal functioning."
				},
				{
					"reference ID": "RE0005",
					"description": "Flooding the network with fake UDP packets causes latency and disconnects telemetry and video feed."
				}
            ],
            "reference ID": ["RE0001","RE0003","RE0005"]
        },
		{
            "ID": "T5069.002",
            "name": "Endpoint Denial of Service",
            "short_description": "Adversaries may exhaust or crash specific vehicle components to degrade functionality or block access.",
            "full_description": "Endpoint DoS attacks in AVs focus on overloading or disabling a single target, such as an ECU, sensor, or onboard software module. This may be achieved through jamming, high-rate requests, firmware vulnerabilities, or resource exhaustion (e.g., CPU, memory). \n For instance, disabling the power steering module or jamming GNSS signals can render essential functions unresponsive while the rest of the system remains operational.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
				{
					"reference ID": "RE0005",
					"description": "Overloading hardware resources (CPU, RAM, or disk) through excessive requests degrades system performance."
				},
				{
					"reference ID": "RE0041",
					"description": "Researchers send crafted CAN messages to the Power Steering Control Module to overload the CAN network and disable steering control."
				}
            ],
            "reference ID": ["RE0005", "RE0041"]
        },
		{
            "ID": "T5050.001",
            "name": "CAN Sniffing",
            "short_description": "Adversaries passively monitor the CAN bus to collect message traffic between ECUs and gain knowledge about the vehicle’s internal network structure.",
            "full_description": "CAN sniffing refers to the passive interception of Controller Area Network (CAN) traffic within a vehicle. Adversaries may gain physical or remote access to the CAN bus, such as through the OBD-II port or an exposed ECU and use diagnostic tools to observe real-time communication between Electronic Control Units (ECUs). This includes both operational control messages (e.g., throttle, braking) and diagnostic exchanges between the gateway and ECUs. \n Through this method, adversaries aim to identify message IDs, patterns, and ECU functions to map out the vehicle's internal communication structure. \n This discovery process can serve as a precursor for further attacks, such as message spoofing, replay, or function manipulation.",
            "created": "25/02/2025",
            "modified": "03/04/2025",
            "sub-technique ID": [],
            "mitigation ID": [],
            "example": [
				{
					"reference ID": "RE0016",
					"description": "Researchers sniff communication to capture the CAN messages between ECUs and diagnostic messages between ECUs and gateway."
				},
				{
					"reference ID": "RE0022",
					"description": "Researchers sniff and capture CAN messages from the vehicle via OBD-II port and diagnostic application."
				},
				{
					"reference ID": "RE0044",
					"description": "Researchers describes how attackers can connect to the OBD-II port and use sniffing tools like can-utils to monitor CAN traffic. By observing message IDs and data patterns."
				},
				{
					"reference ID": "RE0011",
					"description": "Researchers passively sniffed CAN messages and UDS data frames on the CAN-CH Bus to analyse UDS request and response."
				},
				{
					"reference ID": "RE0014",
					"description": "Researchers used sniffers to observe CAN traffic on both CAN-C and CAN-IHS buses, allowing them to identify messages related to steering, braking, and other physical control systems."
				}

            ],
            "reference ID": ["RE0014","RE0016", "RE0022", "RE0044", "RE0011"]
		}
    ],
    "mitigations": [
        {
            "ID": "M2001",
            "name": "Patch Management",
            "description": "Regularly update and patch vehicle software.",
            "created": "01/02/2023",
            "modified": "01/02/2024",
            "reference ID": []
        },
        {
            "ID": "M2002",
            "name": "User Training",
            "description": "Educate users on phishing threats.",
            "created": "02/02/2023",
            "modified": "02/02/2024",
            "reference ID": []
        },
        {
            "ID": "M3001",
            "name": "Code Signing",
            "description": "Ensure all scripts are signed and verified.",
            "created": "01/03/2023",
            "modified": "01/03/2024",
            "reference ID": []
        }
    ],
    "references": [
        {
            "ID": "RE0001",
            "name": "A study on cyber-security of autonomous and unmanned vehicles",
			"cite": "E. Yağdereli, C. Gemci, and A. Z. Aktaş, “A study on cyber-security of autonomous and unmanned vehicles,” J. Def. Model. Simul., vol. 12, no. 4, pp. 369–381, 2015, doi: 10.1177/1548512915575803.",
            "link": "https://doi.org/10.1177/1548512915575803",
            "description": "The study by Yağdereli et al. (2015) explores the cyber-security challenges associated with autonomous and unmanned vehicles, encompassing a broad range of platforms such as autonomous cars, civilian aircraft, trains, unmanned surface vessels (USVs), and space-traversing vehicles. It categorises cyber-attacks into passive and active types, highlighting eavesdropping and traffic analysis as key passive threats, while identifying active threats like masquerading, replay attacks, message modification, and denial-of-service attacks. The study also outlines specific vulnerabilities, focusing on CAN bus protocol weaknesses in automotive systems and GPS spoofing, jamming, and signal manipulation in UAV systems. To address these risks, the authors propose mitigation strategies that include secure communication protocols for encryption and authentication, a defense-in-depth architecture, redundancy and diversity measures, secure-by-design principles, and the adoption of real-time distributed system architectures. "
        },
        {
            "ID": "RE0002",
			"name": "Cybersecurity for unmanned systems",
            "cite": "J. Yen, J. Smigal, D. Singh, J. Ricks, D. Brower, and P. Barlow, “Cybersecurity for unmanned systems,” Unmanned Syst. Technol. XIX, vol. 10195, p. 101950R, 2017, doi: 10.1117/12.2265912.",
            "link": "https://doi.org/10.1117/12.2265912",
            "description": "The study by Yen et al. (2017) addresses cryptographic challenges faced by Unmanned Systems, particularly in protecting classified information in remote and high-risk environments. It highlights the importance of addressing Size, Weight, and Power (SWaP) constraints, which are critical for smaller platforms, and ensuring secure data exchange between classified and unclassified domains through Cross Domain Solutions (CDS). The authors propose cryptographic protection methods for both Data in Transit (DIT) and Data at Rest (DAR), advocating for the use of cryptographic devices to secure traffic such as data and voice transmissions and recommending secure erasure of cryptographic keys to mitigate risks in the event of system capture. For CDS, the study suggests ensuring secure transmission of data between encrypted (classified) and unencrypted (unclassified) domains, including radios and sensors, designing modular systems with secure interfaces to facilitate upgrades and integration, and employing cryptographic systems that restrict cross-boundary communication to predefined messages controlled by strict rules."
        },
        {
            "ID": "RE0003",
            "name": "Securing unmanned autonomous systems from cyber threats",
			"cite": "B. B. Madan, M. Banik, and D. Bein, “Securing unmanned autonomous systems from cyber threats,” J. Def. Model. Simul., vol. 16, no. 2, pp. 119–136, 2019, doi: 10.1177/1548512916628335.",
            "link": "https://doi.org/10.1177/1548512916628335",
            "description": "The study by Madan et al. (2019) examines the cyber threats facing unmanned and autonomous systems, highlighting their differences and commonalities. Unmanned systems rely on remote human operators for control, whereas autonomous systems depend on sensors and autonomous functions for decision-making, though both share a reliance on sensors and controllers. The study identifies initial access threats to UAV systems, such as jamming, information theft, denial-of-service attacks, GPS and wireless jamming and spoofing, and malicious software injection. Common threats include confidentiality risks like insider leaks, wireless link sniffing, weak encryption, and capturing WPA2 handshakes, which can be mitigated using access control policies (Bell–LaPadula Model), standard encryption protocols (WPA2, WPA3, AES), secure communication practices, public key cryptography, and intrusion detection systems (IDS). Integrity threats, such as man-in-the-middle (MITM) attacks and sending fake data while masquerading as legitimate sources, can be addressed through access control policies (Biba Model), cryptographic techniques like digital signatures and hashing with message integrity codes (MIC), IPSEC authentication headers for sender verification, and real-time monitoring. Availability threats, including DoS/DDoS attacks, malware injection via buffer overflow vulnerabilities, and jamming attacks that disrupt communication frequencies, can be mitigated using spread spectrum techniques, anti-DoS/DDoS solutions like IPS and traffic filters, and tools like StackGuard or NX-bit protection to prevent executable code from exploiting buffer overflow. The authors also propose other mitigation strategies, including policy-based approaches, proactive threat identification through penetration testing, and honeypots."
        },
		{
            "ID": "RE0004",
            "name": "Vulnerability Assessment of Vehicle to Infrastructure Communication: A Case Study of Unmanned Ground Vehicle",
			"cite": "A. Abdullahi, T. Dargahi, and M. Babaie, “Vulnerability Assessment of Vehicle to Infrastructure Communication: A Case Study of Unmanned Ground Vehicle,” 2020 IEEE Globecom Work. GC Wkshps 2020 - Proc., 2020, doi: 10.1109/GCWkshps50303.2020.9367408.",
            "link": "https://doi.org/10.1109/GCWkshps50303.2020.9367408",
            "description": "The study by Abdullahi et al. (2020)investigates vulnerabilities in Vehicle-to-Infrastructure communication, using an Unmanned Ground Vehicle as a case study. It aims to demonstrate how insecure wireless communication, even with WPA2-protected Wi-Fi, and poor access controls can allow attackers to remotely compromise UGVs. The experiment was set up with a target system comprising a Husky UGV equipped with stereo cameras, LiDAR, GPS, IMUs, and an onboard Robot Operating System (ROS 1.0) computer, along with a Wi-Fi base station and OpenSSH. The attacker system utilised tools such as Kali Linux, Aircrack-ng for Wi-Fi attacks, Bettercap for wireless network reconnaissance, NMAP for network scanning, and Metasploit for vulnerability exploitation. \n The attack followed a step-by-step process. During the reconnaissance phase, the attacker performed a Wi-Fi handshake replay attack on the WPA2-protected base station and used Bettercap to map the network topology, identifying the UGV’s onboard computer, camera, and LiDAR. In the vulnerability assessment phase, the onboard computer's IP address was targeted, and open ports and services were scanned, revealing that port 22 for SSH was open. The exploitation phase involved launching an SSH brute force attack using Metasploit’s CVE-1999-0502 module and exploiting weak or default credentials to establish an SSH session with administrator privileges. This granted access to all ROS core packages running on the UGV. In the post-exploitation phase, the attacker achieved complete control over the UGV, overwriting legitimate operator commands, modifying velocity control commands, and manipulating the UGV’s speed and direction."
        },
		{
            "ID": "RE0005",
            "name": "Towards data-driven autonomous cyber defence for military unmanned vehicles-threats & attacks",
			"cite": "A. D. Kaasen, G. Grov, F. Mancini, and M. Baksaas, “Towards data-driven autonomous cyber defence for military unmanned vehicles-threats & attacks,” Proc. - IEEE Mil. Commun. Conf. MILCOM, vol. 2022-Novem, pp. 861–866, 2022, doi: 10.1109/MILCOM55135.2022.10017692.",
            "link": "https://doi.org/10.1109/MILCOM55135.2022.10017692",
            "description": "The study by Kaasen et al. (2022) explores methods to disrupt a military unmanned ground vehicle and develops a machine-learning-based detection capability. The attacks were demonstrated using the Tor Vehicle, a diesel-electric hybrid tracked vehicle equipped with LiDAR, cameras, GPS, and accelerometers for autonomous navigation. Tor uses ROS for low-level control and ROS2 for autonomous driving software, sensor drivers, and communication middleware. The experiments included testing the attacks in both simulated and real-vehicle scenarios. \nThe researchers carried out a range of attacks on the Tor Vehicle: (1) Denial of Service (DoS) attacks involved network flooding with fake UDP or ROS messages to overload system resources. (2) Topic hijacking attacks altered the generator mode, enabled or disabled brakes, activated emergency mode, modified the cooling system, and inserted fake drive commands. (3) Configuration and launch file tampering attacks involved altering sensor clock skew to cause incorrect decisions and modifying configuration files to create hidden channels for information exfiltration. The researchers collected and labeled attack messages to build an Intrusion Detection System (IDS) using machine learning models such as decision tree classifiers, k-nearest neighbors, and random forest, achieving an accuracy of 99%."
        },
		{
            "ID": "RE0006",
            "name": "Ensuring Cybersecurity of the Cyber Physical System of Combined Fleets of Unmanned Aerial, Ground and Sea Vehicles",
			"cite": "H. Zemlianko and V. Kharchenko, Ensuring Cybersecurity of the Cyber Physical System of Combined Fleets of Unmanned Aerial, Ground and Sea Vehicles, vol. 996 LNNS. Springer Nature Switzerland, 2024. doi: 10.1007/978-3-031-60549-9_29",
            "link": "https://link.springer.com/chapter/10.1007/978-3-031-60549-9_29",
            "description": "The study by H. Zemlianko and V. Kharchenko (2024) proposes a System-of-System architecture for unmanned vehicles, providing a holistic view of the system. The UV system includes UAVs, UUVs, USVs, UGVs, charging stations, control centres, cloud databases, and communication hubs. The communication infrastructure relies on satellite-based global communication and control centres. Threats to the UV system are categorised into physical, cyber, internal, and external sources. Common attacks include data manipulation, DoS, unauthorised access, and data ransom attacks. Vulnerabilities are grouped into control channels, software flaws, hardware weaknesses, and insecure data transmission protocols. \n The paper discusses several countermeasures. These include encryption protocols, secure firmware updates, multi-factor authentication, behaviour analytics, IDS, network segmentation, and redundancy mechanisms. It also introduces Intrusion Mode and Effects Criticality Analysis to qualitatively evaluate threats, vulnerabilities, attack types, consequences, UV types, likelihood, severity, and risk. Based on this analysis, the paper provides a structured matrix of criticality for risks and proposes corresponding countermeasures."
        },
		{
            "ID": "RE0007",
            "name": "Event-Triggered Adaptive Security Path Following Control for Unmanned Ground Vehicles Under Sensor Attacks",
			"cite": "H. T. Sun and C. Peng, “Event-Triggered Adaptive Security Path Following Control for Unmanned Ground Vehicles Under Sensor Attacks,” IEEE Trans. Veh. Technol., vol. 72, no. 7, pp. 8500–8509, 2023, doi: 10.1109/TVT.2023.3250709.",
            "link": "https://doi.org/10.1109/TVT.2023.3250709",
            "description": "The study of Sun et al. (2023) proposes an Event-Triggered Adaptive Security Control (ET-ASC) mechanism for unmanned ground vehicles (UGVs) to maintain path stability under sensor attacks. The approach is based on several assumptions, including that the UGV follows a fixed, predetermined route, and its position, rotation, and other dynamics are modelled using state-space representation. Additionally, attacks are modelled as state-dependent disturbances affecting the vehicle's performance. \n The ET-ASC mechanism operates by reducing communication overhead through event-triggered transmission, where sensor data is sent only when significant deviations occur. Upon receiving data, the mechanism detects sensor compromise and applies correction signals accordingly. The system continuously adjusts corrections to restore and maintain path stability. \n For validation, the proposed method was tested using MATLAB/Simulink and CarSim in a double-lane change scenario at 30 km/h. The evaluation considered three scenarios: no attack, an attack without correction, and an attack with ET-ASC. The results demonstrate that ET-ASC effectively mitigates sensor attacks, reducing lateral offset while minimising steering oscillations, lateral acceleration, and yaw rate."
        },
		{
            "ID": "RE0008",
            "name": "Towards the resilience quantification of (military) unmanned ground vehicles",
			"cite": "R. Krecht, A. Suta, Á. Tóth, and Á. Ballagi, “Towards the resilience quantification of (military) unmanned ground vehicles,” Clean. Eng. Technol., vol. 14, no. May, 2023, doi: 10.1016/j.clet.2023.100644.",
            "link": "https://link.springer.com/chapter/10.1016/j.clet.2023.100644",
            "description": "The study of Kretch et al. (2023) quantifies the resilience of military unmanned ground vehicles (UGVs). Resilience is defined as the ability of a UGV to maintain functionality or recover from faults and failures under various conditions. To achieve this, the study proposes a methodology using Process Graphs (P-Graphs) and introduces a resilience index (R). The proposed method follows a step-by-step approach, where UGVs are modelled as systems with multiple subsystems, including environmental perception (sensors and processing units), propulsion systems (engines and motors), and control units responsible for high- and low-level navigation and task execution. Based on this system model, the author examines how the system functions and identifies potential failure points when different parts malfunction. This information is then represented in a P-Graph, which illustrates the dependencies between different system components and the types of failures that may occur. \n To quantify resilience, the study defines a metric, Resilience Quantification (q), which categorises subsystem functionality into five capability levels: complete failure, minimal functionality (emergency functions only), reduced functionality (partial operation with limitations), near-full functionality (minor errors), and no failure. Furthermore, the resilience index (R) is introduced to quantify the likelihood of maintaining acceptable functionality, defined as q ≥ 0.2."
        },
		{
            "ID": "RE0009",
            "name": "Experimental security analysis of a modern automobile",
			"cite": "K. Koscher et al., “Experimental security analysis of a modern automobile,” Proc. - IEEE Symp. Secur. Priv., pp. 447–462, 2010, doi: 10.1109/SP.2010.34.",
            "link": "https://link.springer.com/chapter/10.1109/SP.2010.34",
            "description": "The study by K. Koscher et al. (2010) examines vehicle architectures and protocols, highlighting significant security challenges. It focuses on the lack of authentication and access control within the CAN protocol and identifies how various vehicle components fail to meet contemporary security standards. The authors conducted experiments to demonstrate these vulnerabilities through three testing approaches: bench testing, where the ECU was reverse-engineered in a controlled lab environment; stationary testing, which involved attacking a car mounted on a rack stand; and road testing, where attacks were tested on a closed road. The study implemented several attack methods to exploit these vulnerabilities. Packet injection techniques allowed crafted CAN packets to control critical vehicle systems, such as brakes, the engine, and instrument clusters. Fuzzing was employed to send random packets continuously, uncovering undocumented functionalities and vulnerabilities within ECUs. Additionally, firmware modification involved reverse-engineering ECU firmware to inject malicious code into the telematics unit and other vehicle modules. The researchers also executed multi-component exploits, such as manipulating speedometer readings and disabling all vehicle lights.\n The paper identifies several critical security weaknesses. The broadcast nature of CAN lacks authentication and source identifiers, enabling any node to impersonate others. Unprotected firmware updates, devoid of encryption or signing, allow attackers to load unauthorized code. Weak access controls, including poorly enforced challenge-response mechanisms on diagnostic protocols, further exacerbate security risks across ECUs. Moreover, network bridging issues were highlighted, with the telematics ECU acting as a cross-domain connection point, enabling attacks from the low-speed to the high-speed CAN network."
        },
		{
            "ID": "RE0010",
            "name": "Comprehensive experimental analyses of automotive attack surfaces",
			"cite": "S. Checkoway et al., “Comprehensive experimental analyses of automotive attack surfaces,” Proc. 20th USENIX Secur. Symp., pp. 77–92, 2011",
            "link": "https://dl.acm.org/doi/abs/10.5555/2028067.2028073",
            "description": "The study by S. Checkoway et al. (2011) classifies vehicle attack vectors into three main categories. Physical access is achieved through service tools like OBD-II ports or PassThru devices used by manufacturers for ECU diagnostics and reprogramming, as well as media interfaces such as CDs. Short-range wireless access includes technologies like Bluetooth, Tire Pressure Monitoring Systems (TPMS), and RFID car keys. Long-range wireless access encompasses cellular communication, FM radio, and satellite communication. \n The analysis delves into the vulnerabilities of these attack vectors. For media players, a buffer overflow in the WMA parser allows arbitrary code execution. This vulnerability can be exploited by crafting a malicious WMA file that injects CAN packets when played, enabling vehicle control. PassThru devices, which connect via OBD-II ports, expose an unauthenticated API over WiFi, permitting shell-based attack injections. Malware installed on these devices during routine maintenance compromises vehicle systems. Bluetooth systems are vulnerable due to unsafe strcpy() calls in the telematics unit firmware. Exploits include Trojan apps on paired devices or brute-forcing Bluetooth PINs, leading to code execution. Cellular telematics suffer from a buffer overflow vulnerability that enables remote command execution and data exfiltration. In advanced attacks, remote code execution is achieved by sending specially crafted audio signals via a phone call to exploit telematics firmware. The potential impacts of these vulnerabilities are significant, including GPS data exfiltration, remote vehicle control, and cabin audio monitoring."
        },
		{
            "ID": "RE0011",
            "name": "Free-fall: hacking tesla from wireless to can bus",
			"cite": "S. Nie, L. Liu, and Y. Du, “Free-fall: hacking tesla from wireless to can bus,” Defcon, pp. 1–16, 2017, [Online].",
            "link": "https://www.blackhat.com/docs/us-17/thursday/us-17-Nie-Free-Fall-Hacking-Tesla-From-Wireless-To-CAN-Bus-wp.pdf",
            "description": "The study by Nie et al. (2017) presents a detailed and technical breakdown of a remote attack on Tesla Model S vehicles. The attack chain spans from wireless entry points to critical in-vehicle systems, culminating in the injection of malicious CAN bus messages. For the remote attack surface, the researchers identified Tesla's wireless connectivity features as a primary vulnerability. Tesla vehicles use Wi-Fi networks, including Tesla Guest (a hotspot for body shops and superchargers). By spoofing this hotspot and redirecting browser traffic, attackers exploited vulnerabilities in Tesla’s QtCarBrowser. After obtaining a remote shell on the browser, the researchers bypassed the AppArmor application firewall to gain access to critical processes and escalate privileges to root. From the Central Information Display (CID), they gained remote access to the Instrument Cluster (IC), Parrot Module, and Central Gateway. \n By exploiting the Gateway firmware, the researchers successfully injected CAN messages, manipulated critical vehicle functions, and introduced custom firmware into the ECU update and firmware update processes. The experiment also highlighted weaknesses in the UDS protocol, including the use of fixed seeds and XOR-based keys for security access, which enabled predictable ECU unlocking. Additionally, privileged operations, such as reading/writing memory and resetting ECUs, were achievable after bypassing the Security Access service. \n Following the report, Tesla addressed these vulnerabilities. Their efforts included updating the kernel, enforcing stricter AppArmor rules, introducing non-executable directories for binaries, and implementing signature verification for OTA updates and ECU firmware to prevent unauthorized modifications."
        },
		{
            "ID": "RE0012",
            "name": " Over-The-Air: How we remotely compromised the gateway, BCM, and Autopilot ECUs of TESLA cars",
			"cite": "S. Nie, L. Liu, Y. Du, and W. Zhang, “Over-The-Air: How we remotely compromised the gateway, BCM, and Autopilot ECUs of TESLA cars,” BlackHat USA 2018, vol. 1, pp. 1–19, 2018, [Online].",
            "link": "https://www.blackhat.com/us-18/briefings/schedule/over-the-air-how-we-remotely-compromised-the-gateway-bcm-and-autopilot-ecus-of-tesla-cars-10806",
            "description": "The study by Nie et al. (2018) demonstrates how researchers executed remote attacks on Tesla Model S/X vehicles by exploiting zero-day vulnerabilities in critical components such as the gateway ECU, Body Control Modules (BCMs), and Autopilot ECUs. Using the same initial attack vectors as their previous work, they exploited the CID’s wireless connection and leveraged a Webkit vulnerability for arbitrary code execution. They then used a kernel vulnerability (CVE-2017-6261) to escalate privileges and gain root access to the CID. \n While Tesla had previously addressed known vulnerabilities, the researchers found new zero-day exploits to achieve root access. With root access, they bypassed code-signing protections using TOCTOU and filesystem flaws to inject custom firmware into the gateway ECU, allowing manipulation of CAN messages and control over vehicle functions. They also exploited flaws in the ape-service to take control of the Autopilot ECU, used weaknesses in firmware signing and metadata to deploy malicious firmware during OTA updates and create a persistent backdoor, and injected patched firmware to customise the Easter Egg feature, demonstrating their control over body control ECUs."
        },
		{
            "ID": "RE0013",
            "name": "0-days & mitigations: Roadways to exploit and secure connected BMW cars",
			"cite": "Z. Cai, A. Wang, W. Zhang, M. Gruffke, and H. Schweppe, “0-days & mitigations: Roadways to exploit and secure connected BMW cars,” Black Hat USA, vol. 2019, p. 39, 2019.",
            "link": "https://i.blackhat.com/USA-19/Thursday/us-19-Cai-0-Days-And-Mitigations-Roadways-To-Exploit-And-Secure-Connected-BMW-Cars-wp.pdf",
            "description": "The study by Cai et al. (2019) reveals multiple vulnerabilities in the NBT Head Unit, Telematic Communication Box (TCB), and Central Gateway of BMW vehicles. The researchers demonstrated both physical and remote attack methods. For physical access, they exploited vulnerabilities via USB and OBD-II interfaces to gain root privileges on the Head Unit and Central Gateway. For remote attacks, they used a fake GSM base station to intercept TCP messages, gaining browser access and escalating to root privileges on the Head Unit. Similarly, they intercepted SMS messages and exploited a stack overflow to execute arbitrary code on the TCB. \n With root access to the Head Unit and TCB, the researchers were able to inject CAN messages onto the K-CAN bus, as both components are connected to the same bus. Additionally, they exploited diagnostic routing flaws in the Central Gateway to send unauthorized UDS messages across different CAN domains, allowing control over ECUs on other CAN buses. Both physical and remote methods ultimately enabled control over critical vehicle functions through CAN message injection and Central Gateway compromise. \n BMW promptly addressed these vulnerabilities with software updates and enhancements to the Remote Service flow."
        },
		{
            "ID": "RE0014",
            "name": "Remote Exploitation of an Unaltered Passenger Vehicle",
			"cite": "C. Miller and C. Valasek, “Remote Exploitation of an Unaltered Passenger Vehicle,” Defcon 23, vol. 2015, pp. 1–91, 2015, [Online].",
            "link": "https://www.scirp.org/reference/referencespapers?referenceid=3895347",
            "description": "The study by Miller and Valasek (2015) outlines a detailed and systematic approach to remotely hacking and controlling a 2014 Jeep Cherokee. Their research focuses on vulnerabilities in the Uconnect infotainment system, which connects to both critical (CAN-C) and comfort (CAN-IHS) networks via the Renesas V850 chip. The authors discovered a flaw in the D-Bus service, allowing them to gain root access to the infotainment head unit. They then reprogrammed the system's firmware to send harmful CAN messages. Using this compromised system, the researchers demonstrated remote control of key functions like speed, steering, and brakes, showcasing realistic attack scenarios. \n More critically, the study explores how vulnerable vehicles could be identified over cellular networks through Uconnect’s telematics capabilities. The Uconnect system, which relies on Sprint’s cellular network for features like real-time traffic updates, in-car Wi-Fi, and remote diagnostics, exposed vehicles to scanning. By identifying Sprint’s IP address ranges, the researchers could locate vehicles with active Uconnect systems. Once found, they exploited the D-Bus service to remotely run commands on multiple vehicles. This included compromising the infotainment unit, reprogramming the V850 chip, and sending malicious CAN messages. With millions of vehicles using similar systems, such an attack could scale globally. The authors even proposed a theoretical `vehicle worm` to automate scanning, exploitation, and spreading, significantly increasing the threat's impact."
        },
		{
            "ID": "RE0015",
            "name": "Detecting attacks against robotic vehicles: A control invariant approach",
			"cite": "H. Choi et al., “Detecting attacks against robotic vehicles: A control invariant approach,” Proc. ACM Conf. Comput. Commun. Secur., pp. 801–816, 2018, doi: 10.1145/3243734.3243752. ",
            "link": "https://doi.org/10.1145/3243734.3243752",
            "description": "The study of Choi et al. (2018) [1] presents a novel framework for detecting physical attacks on robotic vehicles, including drones and ground rovers. The proposed approach, known as the Control Invariant (CI) framework, verifies whether a vehicle is behaving normally by comparing its actual movements to expected behaviour based on fundamental physics and programmed control logic. \n The method consists of several key steps. First, the system performs Control Invariant Extraction by gathering information on vehicle dynamics, control algorithms, and environmental disturbances such as wind, gravity, and friction to define the vehicle’s expected behaviour. Next, the control invariant checking logic is embedded into the vehicle’s binary control software without requiring any hardware modifications. The system continuously monitors differences between the observed and predicted states, maintaining a tracking window to filter out minor, temporary variations that are not indicative of attacks. If accumulated errors exceed a predefined threshold, an alarm is triggered to indicate a potential attack. \n To evaluate its effectiveness, the CI framework was tested on 11 robotic vehicles, including quadrotors, hexarotors, and ground rovers. The results demonstrate that the framework successfully detected all tested attacks while maintaining zero false positives during normal operations, proving its reliability as a security mechanism for robotic vehicles."
        },
		{
            "ID": "RE0016",
            "name": "Security threats to automotive CAN networks. Practical examples and selected short-term countermeasures",
			"cite": "T. Hoppe, S. Kiltz, and J. Dittmann, “Security threats to automotive CAN networks. Practical examples and selected short-term countermeasures,” Reliab. Eng. Syst. Saf., vol. 96, no. 1, pp. 11–25, 2011, doi: 10.1016/j.ress.2010.06.026.",
            "link": "https://doi.org/10.1016/j.ress.2010.06.026",
            "description": "The study of Hoppe et al. (2011) investigates security threats to automotive Controller Area Network (CAN) systems by exploring four practical attack scenarios targeting window lifts, warning lights, airbags, and gateway ECUs. The first scenario involves compromising the window lift system by injecting malicious code into an ECU connected to the comfort CAN subnetwork. The attacker monitors vehicle speed and replays CAN messages to open the window when the speed exceeds 200 km/h. This results in a Denial-of-Service (DoS) attack on the window system, preventing the driver from closing the window while the malicious code continuously sends CAN messages, thereby compromising driver safety and increasing potential distractions. \n The second attack scenario targets warning lights by using a tampered ECU or an external device, such as a development board, to manipulate CAN messages. The attacker intercepts ``warning light ON`` messages and injects ``warning light OFF`` messages, disrupting the anti-theft system. As a result, the attack disables the warning indicators, allowing theft without triggering alarms. \n The third attack manipulates the airbag system using a tampered device or an external controller to simulate a functional airbag ECU. The attacker records diagnostic responses and replays them during system checks, concealing the absence of an actual airbag ECU. This attack effectively hides warning indicators and bypasses diagnostic sessions, making the airbag system appear functional when it is not. \n The final scenario exploits a vulnerability in the gateway ECU’s message filtering mechanism during diagnostics. The attack initiates a diagnostic session and sends messages using reserved CAN IDs to force the gateway to forward them to critical ECUs. This enables unauthorised access to internal vehicle communications and allows potential manipulation of safety-critical systems. \n To mitigate these security threats, the study proposes short-term countermeasures, including an Intrusion Detection System (IDS) to detect abnormal message frequencies and verify message senders. Additionally, the study suggests a proactive IT forensic approach by identifying eight forensic data types that should be collected and logged during diagnostic sessions to detect suspicious activities and potential security breaches."
        },
		{
            "ID": "RE0017",
            "name": "Remote Attacks on Automated Vehicles Sensors: Experiments on Camera and LiDAR",
			"cite": "J. Petit, B. Stottelaar, M. Feiri, and F. Kargl, “Remote Attacks on Automated Vehicles Sensors: Experiments on Camera and LiDAR,” Blackhat.com, pp. 1–13, 2015",
            "link": "https://www.blackhat.com/docs/eu-15/materials/eu-15-Petit-Self-Driving-And-Connected-Cars-Fooling-Sensors-And-Tracking-Drivers-wp1.pdf",
            "description": "The study of Petit et al. (2015) explores the vulnerability of automated vehicle (AV) sensors to remote attacks, specifically focusing on camera and LiDAR systems. The research examines different attack techniques and their impact on the perception systems of AVs. \n For camera attacks, the study investigates two primary methods: blinding the camera and confusing its auto controls. The blinding attack involves using laser diodes and LEDs to emit intense light directly into the camera’s sensor, disrupting object detection. The effectiveness of this attack depends on factors such as the wavelength of light, distance, and environmental lighting conditions, with darker environments making the attack easier. Experimental results indicate that a 650 nm laser was the most effective in impairing the camera's function. In contrast, the second attack manipulates the camera’s automatic exposure and gain settings by rapidly flashing LED pulses. This continuous exposure adjustment creates a time lag in the camera's auto-adjustment process, leading to missed objects. The experiment shows that the camera took 5.3 seconds to recover, during which it failed to detect objects. \n For LiDAR attacks, the study analyses two attack strategies: relay attacks and spoofing. The relay attack intercepts and retransmits LiDAR pulses from a different location, creating false reflections at unintended positions. The attack is executed using two transceivers: a 905 nm photodetector to capture incoming LiDAR pulses and a laser diode to retransmit the captured signal with a delay. This deception tricks the system into misjudging object distances, potentially leading to navigation errors or collisions. The spoofing attack, on the other hand, involves synchronizing with the LiDAR’s scan cycle and injecting false echoes, causing the system to detect non-existent obstacles. Multiple reflections can be introduced to simulate multiple fake objects, leading the LiDAR to classify them as real. \n To mitigate these threats, the study proposes several countermeasures. For camera attacks, redundancy through multiple cameras, the implementation of infrared filters to block unwanted light, and the use of materials that adjust transparency based on light intensity are suggested. For LiDAR attacks, the countermeasures include introducing random probing intervals to prevent synchronization by attackers, using multi-wavelength LiDAR systems to detect anomalies, and applying data fusion techniques to compare multiple sensor inputs for consistency."
        },
		{
            "ID": "RE0018",
            "name": "Autonomous vehicle ultrasonic sensor vulnerability and impact assessment",
			"cite": "B. S. Lim, S. L. Keoh, and V. L. L. Thing, “Autonomous vehicle ultrasonic sensor vulnerability and impact assessment,” IEEE World Forum Internet Things, WF-IoT 2018 - Proc., vol. 2018-Janua, pp. 231–236, 2018, doi: 10.1109/WF-IoT.2018.8355132.",
            "link": "https://doi.org/10.1109/WF-IoT.2018.8355132",
            "description": "The study of Lim et al. (2018) [10] presents a threat model where adversaries, despite lacking internal access to the vehicle, can manipulate externally exposed ultrasonic sensors. The research examines four attack scenarios in a controlled lab environment using off-the-shelf ultrasonic sensors (HC-SR04) and an Arduino to assess vulnerabilities in autonomous vehicle perception systems. \n The first attack exploits ultrasonic sensor blind spots by using thin objects such as straws, chopsticks, hairpins, or cards to evade detection. This demonstrates how small obstacles may go undetected, potentially leading to collisions. The second scenario involves physically obstructing the sensor, either at the transmitter, receiver, or both, to evaluate the impact of blockage on detection accuracy. The results confirm that any physical obstruction severely degrades the sensor’s performance. \nThe third attack employs acoustic materials, such as acoustic foam, to absorb ultrasonic waves, effectively making obstacles invisible to the sensor. This highlights the risk of adversaries placing specific materials in the environment to manipulate sensor readings. Lastly, the fourth scenario explores interference attacks by positioning two ultrasonic sensors facing each other. This setup disrupts distance measurements, causing erroneous readings and unreliable obstacle detection. \n Through these experiments, the study underscores the vulnerabilities of ultrasonic sensors in autonomous vehicles and the potential consequences of external tampering on vehicle safety and navigation."
        },
		{
            "ID": "RE0019",
            "name": "Adversarial sensor attack on LiDAR-based perception in autonomous driving",
			"cite": "Y. Cao et al., “Adversarial sensor attack on LiDAR-based perception in autonomous driving,” Proc. ACM Conf. Comput. Commun. Secur., pp. 2267–2281, 2019, doi: 10.1145/3319535.3339815",
            "link": "https://doi.org/10.1145/3319535.3339815",
            "description": "The study of Cao et al. (2019) [11] explores the feasibility of adversarial sensor attacks on LiDAR-based perception in autonomous driving, specifically investigating whether spoofed LiDAR points can manipulate machine learning-based object detection pipelines and influence autonomous vehicle (AV) decision-making. The research finds that blind spoofing methods, which operate within a narrow horizontal range (~8 degrees), are ineffective at mimicking real obstacles. \n The proposed threat model assumes that an attacker leverages LiDAR spoofing techniques to inject adversarial data into the AV perception system. The adversary is granted white-box access to the perception model, allowing them to craft targeted perturbations. Attack scenarios include both static roadside attackers and those positioned in adjacent vehicles. The primary attack objective is to introduce ``front-near obstacles`` within approximately five meters of the AV, leading to incorrect driving decisions such as sudden braking or freezing at intersections. \n To achieve this, the study introduces an attack methodology termed Adv-LiDAR, which comprises four key stages. First, input perturbation analysis is performed to model the capabilities of LiDAR spoofing, including position and distance control. Next, the attack is formulated as an optimization problem to maximize the likelihood of successfully spoofing an obstacle. A hybrid approach involving global sampling and optimization is then employed to escape local minima and improve attack success rates. Finally, the driving decision impact evaluation stage simulates attacks to assess how AVs respond to spoofed obstacles. \n The research also presents two case studies demonstrating the real-world impact of these attacks. The first, an emergency brake attack, involves spoofed obstacles forcing the AV to halt abruptly, increasing the risk of rear-end collisions. The second, an AV freezing attack, exploits phantom obstacles at a traffic light to keep the AV stationary, leading to traffic congestion. These findings underscore the potential risks of LiDAR spoofing in AV systems and highlight the need for robust countermeasures."
        },
		{
            "ID": "RE0020",
            "name": "Towards robust LiDAR-based perception in autonomous driving: General black-box adversarial sensor attack and countermeasures",
			"cite": "J. Sun, Y. Cao, Q. A. Chen, and Z. Morley Mao, “Towards robust LiDAR-based perception in autonomous driving: General black-box adversarial sensor attack and countermeasures,” Proc. 29th USENIX Secur. Symp., pp. 877–894, 2020, doi: 10.48550/arXiv.2006.16974",
            "link": "https://doi.org/10.48550/arXiv.2006.16974",
            "description": "The study of Sun et al. (2020) [12] investigates the vulnerabilities of current LiDAR-based perception models in autonomous driving, particularly their failure to account for occlusion patterns, which makes them susceptible to adversarial spoofing attacks. Two types of occlusion issues are identified: inter-occlusion, where objects hidden behind others receive fewer LiDAR points, and intra-occlusion, where distant objects naturally contain sparse point clouds due to self-occlusion. \n To exploit these weaknesses, the study introduces a black-box LiDAR spoofing attack, which follows a three-step process. In the first step, attack traces are generated by extracting data from occluded and distant vehicles in the KITTI dataset. A 3D mesh of a vehicle is then rendered using a ray-casting simulation to replicate the LiDAR scanning process. The second step involves transforming these attack traces and injecting them into the perception pipeline of the victim autonomous vehicle (AV). This attack can take two forms: digital spoofing, where attack traces are digitally merged into point clouds and tested in simulations, and physical spoofing, where laser-based devices inject attack traces into actual LiDAR sensors. The third step evaluates the attack’s effectiveness against three state-of-the-art LiDAR perception models: Apollo 5.0 (bird’s-eye view-based), PointPillars (voxel-based), and PointRCNN (point-wise). \n To mitigate these threats, the study proposes two countermeasures. The first approach, CARLO (oCclusion-Aware hieRarchy anomaLy detectiOn), employs a hierarchical detection pipeline. In the first stage, it identifies legitimate objects by ensuring they exhibit minimal LiDAR beam penetration due to their solid structure, whereas spoofed objects tend to allow more penetration due to their sparsity. In the second stage, the system detects spoofed vehicles by recognising their unnaturally high free-space ratios caused by a lack of occlusion. The second mitigation technique, SVF (Sequential View Fusion), enhances LiDAR perception by integrating neglected physical features. It projects 3D LiDAR point clouds into a front-view representation and combines them with traditional 3D representations to ensure both perspectives are effectively utilised. Additionally, SVF improves LiDAR feature extraction by classifying each point with confidence scores and detecting spoofed objects that fail to match expected occlusion properties."
        },
		{
            "ID": "RE0021",
            "name": "Can You Trust Autonomous Vehicles: Contactless Attacks against Sensors of Self-driving Vehicle",
			"cite": "Y. Chen, W. Xu, and L. Jianhao, “Can You Trust Autonomous Vehicles: Contactless Attacks against Sensors of Self-driving Vehicle,” Defcon 24, pp. 189–190, 2024, doi: 10.1145/1235.",
            "link": "https://infocon.org/cons/DEF%20CON/DEF%20CON%2024/DEF%20CON%2024%20presentations/DEF%20CON%2024%20-%20Liu-Yan-Xu-Can-You-Trust-Autonomous-Vehicles-WP.pdf",
            "description": "The study of Chen et al. (2024) [13] highlights the security risks associated with sensor-based driving decisions in autonomous vehicles, demonstrating how attackers can exploit vulnerabilities in ultrasonic sensors, millimeter-wave radars, and forward-looking cameras to deceive or disable vehicle systems. The research presents contactless attack methods, including jamming and spoofing techniques, tested on a Tesla Model S in both lab and outdoor environments. \n The study details multiple ultrasonic sensor attacks. A jamming attack is executed using an Arduino device to continuously emit high-frequency sound waves (40–50 kHz), which overloads the vehicle’s sensors, causing them to misread distances or fail to detect obstacles entirely, increasing the risk of crashes during parking or low-speed driving. A spoofing attack, on the other hand, sends out specially crafted sound waves that mimic real echoes, tricking the sensors into detecting false obstacles or misjudging distances. Additionally, an acoustic quieting approach is explored, where attackers use sound-absorbing materials (passive approach) or noise cancellation techniques (active approach) to disrupt sensor signals. \n The research also investigates millimeter-wave radar attacks. A jamming attack is conducted by transmitting high-power electromagnetic waves (76–77 GHz) to interfere with the vehicle’s radar system, rendering it unable to detect objects and potentially disabling critical safety features like Autopilot. A spoofing attack involves injecting synthetic radar signals with modified frequency modulation patterns to generate false detections or distort object distances, leading to incorrect responses from safety systems such as cruise control and collision prevention. Furthermore, a replay attack captures and retransmits radar signals with a delay, creating phantom objects that mislead the vehicle into taking unnecessary actions or ignoring real obstacles. \n Lastly, the study explores camera-based attacks, particularly blinding attacks. This method uses three different light sources - high-power LED lights, laser pointers, and infrared LEDs - aimed either directly at the camera lens or at nearby objects to create strong glare. As a result, the attack can cause temporary or permanent blindness in the camera, preventing it from recognising lane markings, traffic signs, and obstacles. This disruption can influence the Advanced Driver Assistance System (ADAS), leading to unintended vehicle deviations, emergency braking, and potentially causing accidents. \n These findings underscore the severity of contactless attacks against autonomous vehicle sensors, highlighting the urgent need for more resilient sensing mechanisms and advanced countermeasures to mitigate these threats."
        },
		{
            "ID": "RE0022",
            "name": "A Practical Wireless Attack on the Connected Car and Security Protocol for In-Vehicle CAN",
			"cite": "S. Woo, H. J. Jo, and D. H. Lee, “A Practical Wireless Attack on the Connected Car and Security Protocol for In-Vehicle CAN,” IEEE Trans. Intell. Transp. Syst., vol. 16, no. 2, pp. 993–1006, 2015, doi: 10.1109/TITS.2014.2351612.",
            "link": "https://doi.org/10.1109/TITS.2014.2351612",
            "description": "The study of Woo et al. (2015) investigates the vulnerabilities of the Controller Area Network (CAN) in connected cars and demonstrates a long-range wireless attack using a real vehicle and a malicious smartphone application. The attack exploits the OBD2 diagnostic interface, which is commonly used for vehicle monitoring and maintenance. \n The step-by-step attack begins with the installation of an OBD2 scan tool on the target vehicle, which is paired with the driver’s smartphone via Bluetooth. The smartphone runs a malicious self-diagnostic application that transmits in-vehicle CAN data frames to an attacker's remote server using mobile communication networks (3G/4G). The attacker first captures CAN data frames using diagnostic tools and subsequently injects malicious data remotely through the infected smartphone. The experiment successfully demonstrates several remote attack scenarios, including dashboard distortion, engine shutdown, and unintended acceleration, highlighting the security risks associated with connected vehicle systems. \nTo mitigate these threats, the authors propose a lightweight security protocol tailored to the constraints of CAN networks. The protocol integrates encryption and authentication mechanisms, ensuring real-time message protection through a message authentication code (MAC) and AES-128 encryption. Additionally, efficient key management is implemented to facilitate secure session key distribution and periodic updates, maintaining both forward and backward secrecy. The proposed security framework was tested on a Secure-ECU and evaluated using CANoe software, demonstrating improved efficiency compared to existing security solutions."
        },
		{
			"ID": "RE0023",
			"name": "Mercedes-Benz MBUX Security Research Report",
			"cite": "Tencent Keen Security Lab, “Mercedes-Benz MBUX Security Research Report,” 2021.",
			"link": "https://keenlab.tencent.com/en/whitepapers/Mercedes_Benz_Security_Research_Report_Final.pdf",
			"description": "Tencent Lab’s research on Mercedes-Benz vehicle security uncovered multiple attack vectors targeting the T-Box, telematics system, and remote vehicle services. \n Researchers first forced the vehicle’s T-Box to downgrade from LTE to GSM using a rogue cellular base station built with USRP and OpenBTS. By jamming LTE frequencies and restricting communication to GSM, attackers positioned themselves as a man-in-the-middle (MitM), intercepting SMS messages used for remote vehicle commands. \n The team then extracted firmware from the T-Box and analyzed its software stack, encryption methods, and authentication mechanisms. They found that the vehicle communicated with backend servers using the MQTT protocol, and authentication tokens were stored locally, potentially allowing spoofed communications if extracted. Additionally, certain debugging and diagnostic functionalities remained enabled, and authentication mechanisms were not fully resistant to replay attacks. \n While analyzing the CAN bus, researchers determined that the T-Box had limited direct access, making remote takeover via telematics alone infeasible. However, attackers with physical access could modify firmware to execute unauthorized CAN commands. Furthermore, diagnostic messages and UDS-based commands presented potential avenues for further attack escalation. Lastly, some hardcoded credentials and API keys were discovered, posing a security risk if extracted."
		},
		{
			"ID": "RE0024",
			"name": "Exploiting Wi-fi Stack On Tesla Model S",
			"cite": "Exploiting Wi-Fi Stack on Tesla Model S | Keen Security Lab Blog. (n.d.). Retrieved March 19, 2025,[Online].",
			"link": "https://keenlab.tencent.com/en/2020/01/02/exploiting-wifi-stack-on-tesla-model-s/",
			"description": "Keen Security Lab conducted an investigation into the Parrot module in the Tesla Model S, focusing on its Wi-Fi and Bluetooth functionalities. Their research uncovered vulnerabilities in both the Marvell 88W8688 Wi-Fi chip's firmware and its associated Linux driver, which could be exploited to remotely compromise the vehicle's infotainment system.\n Through reverse engineering, the team discovered a critical vulnerability in the firmware's handling of Add Traffic Stream (ADDTS) response frames. This vulnerability stemmed from improper length calculations that could lead to memory corruption and buffer overflow. By crafting malicious ADDTS response frames, the researchers could achieve arbitrary code execution within the Wi-Fi chip, enabling them to manipulate its behavior and interact with the host system. They further exploited a vulnerability in the Linux driver to escalate privileges and execute code on the CID's Linux system. \n The attack sequence involves several steps: First, the attacker sends deauthentication frames to disconnect the Tesla from its Wi-Fi network. When the vehicle attempts to reconnect, the attacker captures its MAC address. Then, they deliver a crafted ADDTS response frame to exploit the firmware vulnerability, gaining code execution on the Wi-Fi chip. Finally, they leverage the compromised Wi-Fi chip to exploit the driver vulnerability and gain control over the CID's Linux system. This attack chain potentially allows an adversary to remotely access and control the vehicle's infotainment system, with possible implications for other connected in-vehicle components. In response, Tesla has deployed a fix to these vulnerabilities"
		},
		{
			"ID": "RE0025",
			"name": "Road Decals as Trojans: Disrupting Autonomous Vehicle Navigation with Adversarial Patterns",
			"cite": "W. J. Chen, C. Y. Hsu, W. Bin Lee, C. M. Yu, and C. Y. Huang, “Road Decals as Trojans: Disrupting Autonomous Vehicle Navigation with Adversarial Patterns,” Proc. - 2024 54th Annu. IEEE/IFIP Int. Conf. Dependable Syst. Networks - Suppl. Vol. DSN-S 2024, pp. 133–140, 2024, doi: 10.1109/DSN-S60304.2024.00039.",
			"link": "https://doi.org/10.1109/DSN-S60304.2024.00039",
			"description": "The authors explores how physical adversarial patches in the form of road decals can be used to mislead object detection systems in autonomous vehicles. Existing adversarial patch attacks often fail in dynamic environments, where AVs continuously process sensor inputs. To overcome this, the authors propose an improved Expectation Over Transformation (EOT) technique that ensures adversarial patches remain effective under varying conditions, such as different distances, angles, and lighting. Unlike prior colorful adversarial patches, their method uses monochrome adversarial patches with controlled shapes, making them stealthier and easier to deploy in real-world road environments. \n The proposed attack leverages Generative Adversarial Networks (GANs) to create robust adversarial patches. The training process includes: GAN-based Adversarial Patch Generation to produces adversarial patches designed to mislead the object detector; EOT for Robustness to transform to ensure effectiveness in different real-world conditions, such as resizing, rotation, and shadowing; Then the adversarial patches are designed to mislead AVs across multiple frames. \n The attack then was tested in both simulated and real-world environments."
		},
		{
			"ID": "RE0026",
			"name": "Attacks on Machine Learning: Adversarial Examples in Connected and Autonomous Vehicles",
			"cite": "P. Sharma, D. Austin, and H. Liu, “Attacks on Machine Learning: Adversarial Examples in Connected and Autonomous Vehicles,” 2019 IEEE Int. Symp. Technol. Homel. Secur. HST 2019, pp. 1–7, 2019, doi: 10.1109/HST47167.2019.9032989.",
			"link": "https://doi.org/10.1109/HST47167.2019.9032989",
			"description": "This paper examines adversarial attacks on machine learning (ML) models in Connected and Autonomous Vehicles (CAVs), focusing on misbehavior detection and intrusion detection systems (IDS). The researchers use the VeReMi dataset—which simulates various types of vehicular misbehavior—to train their ML models. \nThe study begins by building an Intrusion Detection System using the VeReMi dataset. The researchers train four machine learning models: K-Nearest Neighbors (KNN), Random Forest (RF), Logistic Regression (LR), and Long Short-Term Memory (LSTM) to distinguish between normal and malicious behavior. Using an adversarial dataset, they generate initial attack samples and modify this data through ML and DL models to create deceptive examples that appear normal but contain attacks. They then test the IDS by feeding it these adversarial examples. The findings reveal that while traditional IDS models (KNN, RF) can detect standard attacks, they fail to identify adversarial examples. Moreover, even the more sophisticated deep learning-based IDS models (LSTM, LR) prove vulnerable to these attacks."
		},
		{
			"ID": "RE0027",
			"name": "Attacks on Machine Learning: Adversarial Examples in Connected and Autonomous Vehicles",
			"cite": "F. Aloraini and A. Javed, “Adversarial Attacks in Intrusion Detection Systems: Triggering False Alarms in Connected and Autonomous Vehicles,” Proc. 2024 IEEE Int. Conf. Cyber Secur. Resilience, CSR 2024, pp. 714–719, 2024, doi: 10.1109/CSR61664.2024.10679419.",
			"link": "https://doi.org/10.1109/CSR61664.2024.10679419",
			"description": "This paper investigates how adversarial attacks can manipulate ML-based Intrusion Detection Systems (IDSs) in Connected and Autonomous Vehicles (CAVs). This research introduces adversarial techniques that modify benign frames to appear as attacks, causing false positives (FPs). \n First, researchers train five IDS models to classify CAN frames as normal or malicious using the Car Hacking Dataset, including Deep Neural Network (DNN), Decision Tree (DT), Random Forest (RF), Extra Trees (ET), XGBoost. Then they modify normal CAN frames so that IDS misclassifies them as attacks, leading to false alarms. Specially,, they modifies only data fields (D0–D7) while keeping CAN IDs and DLC values unchanged to maintain valid CAN frame structures. The adversarial attack is performed using four attack techniques: Fast Gradient Sign Method (FGSM) – Quickly perturbs input data using gradients; Basic Iterative Method (BIM) – Repeatedly applies FGSM for stronger attacks; Projected Gradient Descent (PGD) – Adds controlled perturbations while staying within predefined limits; and Decision Tree (DT) Attack – Exploits structural weaknesses in tree-based models to force misclassification. The result show that the IDS models perform well under normal conditions, with 100% accuracy and minimal false positives. However, under adversarial attacks, IDS accuracy drops significantly, and FPs increase dramatically, with attack success rates reach up to 89%."
		},
		{
			"ID": "RE0028",
			"name": "Adversarial Attacks on Intrusion Detection Systems in In-Vehicle Networks of Connected and Autonomous Vehicles",
			"cite": "F. Aloraini, A. Javed, and O. Rana, “Adversarial Attacks on Intrusion Detection Systems in In-Vehicle Networks of Connected and Autonomous Vehicles,” Sensors, vol. 24, no. 12, pp. 1–29, 2024, doi: 10.3390/s24123848.",
			"link": "https://doi.org/10.3390/s24123848",
			"description": "This paper investigates adversarial attacks on Intrusion Detection Systems (IDSs) in In-Vehicle Networks (IVNs) of Connected and Autonomous Vehicles. \n The authors designed two IDS systems: a baseline system using Deep Neural Network (DNN) with four hidden layers, and a Multi-Tier Hybrid IDS (MTH-IDS) combining Decision Tree (DT), Random Forest (RF), and k-means clustering for anomaly detection. Both systems were trained using the Car Hacking Dataset (HCRL dataset), analyzing CAN ID, Data Length Code (DLC), and payload bytes (D0-D7). \n The researchers tested five adversarial attack techniques: Fast Gradient Sign Method (FGSM), Basic Iterative Method (BIM), Projected Gradient Descent (PGD), Carlini & Wagner (C&W) Attack, and Decision Tree (DT) Attack. These attacks modified only data payload fields (D0–D7), leaving CAN IDs and DLC values unchanged to maintain valid CAN frame structure. Their goal was to alter normal CAN frames to trigger false alarms in the IDS. \n Results showed significant degradation in baseline IDS performance, with F1 Score dropping from 95% to 38%. While the MTH-IDS demonstrated better resilience, its F1 Score still fell from 97% to 79% under attack. Additionally, up to 52.34% of normal frames were incorrectly flagged as attacks."
		},
		{
			"ID": "RE0029",
			"name": "Jamming attacks and Anti-Jamming Strategies on Car Remote Keyless Entry System",
			"cite": "C. Temaneh-Nyah and E. J. N. Shivute, “Jamming attacks and Anti-Jamming Strategies on Car Remote Keyless Entry System,” 2023 Int. Conf. Emerg. Trends Networks Comput. Commun. ETNCC 2023 - Proc., pp. 202–208, 2023, doi: 10.1109/ETNCC59188.2023.10284964.",
			"link": "https://doi.org/10.1109/ETNCC59188.2023.10284964",
			"description": "The paper examines jamming attacks on car Remote Keyless Entry (RKE) systems, analysing how signal-to-noise ratio impacts locking mechanisms. The study highlights how small, portable radio frequency jamming devices disrupt car RKE operations, which rely on 315 MHz (North America) and 433.92 MHz (Europe) frequencies.\n Attackers exploit jamming by continuously transmitting interference at the same frequency as the car key fob, preventing the vehicle from locking. They set up two signals were transmitted to a car: one from a gate motor remote (jammer) and another from a car key fob, and test it on different vehicle models to determine their vulnerability to jamming. The study used mathematical models to estimate the received power at the car RKE receiver based on transmission distance and power. \n The result shows that the likelihood of jamming depends on the relative distance between the car key fob and the jammer. Also, higher transmission power from the jammer can overpower the key fob signal, reducing SNR below acceptable levels."
		},
		{
			"ID": "RE0030",
			"name": "Jamming attacks and Anti-Jamming Strategies on Car Remote Keyless Entry System",
			"cite": "Francillon, Aurélien & Danev, Boris & Capkun, Srdjan. (2010). Relay Attacks on Passive Keyless Entry and Start Systems in Modern Cars.. IACR Cryptology ePrint Archive. 2010. 332. ",
			"link": "https://eprint.iacr.org/2010/332.pdf",
			"description": "This paper demonstrates relay attacks on Passive Keyless Entry and Start (PKES) systems used in modern cars. \n The authors construct two relay attack setups, one using a wired physical-layer relay and another using a wireless radio frequency relay, to successfully open and start vehicles while the key remains physically far from the car. \n For the relay-over-cable attack, they set up two loop antennas connected by a coaxial cable: one placed near the car's door handle to capture the Low-Frequency (LF) challenge signal sent by the car, and another placed near the owner's key fob to transmit the relayed signal, making the key believe it is close to the car. The key then transmits its UHF response, and the car receives the correct response and unlocks. \n For the relay-over-air attack, they set up two devices that communicate over a 2.5 GHz RF channel to relay the LF signals—one relay device near the car's door handle and the other near the key fob. This method is more flexible since it can work over long distances (tested up to 50 meters)."
		},
		{
			"ID": "RE0031",
			"name": "Jamming attacks and Anti-Jamming Strategies on Car Remote Keyless Entry System",
			"cite": "F. D. Garcia, D. Oswald, T. Kasper, O. Gmbh, and P. Pavlidès, “Lock It and Still Lose It — On the ( In ) Security of Automotive Remote Keyless Entry Systems,” 25th USENIX Secur. Symp., 2016.",
			"link": "https://www.usenix.org/system/files/conference/usenixsecurity16/sec16_paper_garcia.pdf",
			"description": "This paper exposes severe security vulnerabilities in Remote Keyless Entry (RKE) systems used by major car manufacturers. The authors demonstrate how an attacker can gain unauthorized access to vehicles by exploiting weaknesses in their cryptographic implementations. They analyze two widely used RKE schemes: VW Group's RKE system and the Hitag2 rolling code system. \n For VW Group's RKE system, they reverse-engineered the firmware of the RKE Electronic Control Units (ECUs) and found that most VW Group vehicles share a small set of global master cryptographic keys. With this vulnerability, an attacker can eavesdrop on a single rolling code transmission from a victim's key fob. Then, using the master key, they can decrypt the rolling code and generate new valid codes to unlock the car at will. \n FFor Hitag2-based RKE systems, which are used in Alfa Romeo, Chevrolet, Peugeot, Opel, Renault, Ford, and other vehicles, the authors reverse-engineered the Hitag2 rolling code system and developed a correlation attack. This attack allows an attacker to recover the cryptographic key after eavesdropping on just 4 to 8 rolling codes. To gather these rolling codes, the attacker continuously jams the final checksum byte of the rolling code transmission, preventing the car from receiving the complete signal. Since the vehicle does not respond, the victim presses the button multiple times, unaware of the attack. Each button press generates a new rolling code, which the attacker captures. Once 4–8 rolling codes are collected, the attacker can generate valid rolling codes to unlock the car. \n These vulnerabilities affect millions of cars worldwide, leaving no forensic traces and making remote vehicle theft feasible."
		},
		{
			"ID": "RE0032",
			"name": "On the Security of Remote Key Less Entry for Vehicles",
			"cite": "J. Patel, M. L. Das, and S. Nandi, “On the Security of Remote Key Less Entry for Vehicles,” Int. Symp. Adv. Networks Telecommun. Syst. ANTS, vol. 2018-December, pp. 1–6, 2018, doi: 10.1109/ANTS.2018.8710105.",
			"link": "https://doi.org/10.1109/ANTS.2018.8710105",
			"description": "This paper examines security weaknesses in existing Remote Keyless Entry (RKE) systems. The authors highlight vulnerabilities in rolling code authentication and challenge-response mechanisms, specifically referencing security flaws in Glocker et al.'s protocol. Existing RKE systems have several vulnerabilities: fixed code authentication is transmitted each time, rolling code systems suffer from cryptographic key recovery attacks, and challenge-response mechanisms are vulnerable to OBD port scan attacks—allowing attackers to extract the entire memory state of the key fob and clone it. In Glocker et al.'s protocol, attackers can recover secret keys through pattern analysis, then generate fake authentication responses to bypass security and steal vehicles. The protocol is also susceptible to OBD port scan attacks, enabling attackers to clone key fobs in seconds. \nAdditionally, the authors propose a Secure RKE System that uses a challenge-response authentication scheme with an Unclonable Security Module and Secret Unknown Cipher. This system dynamically generates encryption keys for each session, prevents key fob cloning, and protects the OBD port from unauthorized scanning by ensuring no static authentication data is stored."
		},
		{
			"ID": "RE0033",
			"name": "Gone in 360 seconds: Hijacking with hitag2",
			"cite": "[1] R. Verdult, F. D. Garcia, and J. Balasch, “Gone in 360 seconds: Hijacking with hitag2,” Proc. 21st USENIX Secur. Symp., pp. 237–252, 2012.",
			"link": "https://www.usenix.org/system/files/conference/usenixsecurity12/sec12-final95.pdf",
			"description": "This paper examines security vulnerabilities in the Hitag2 transponder, a widely used cryptographic authentication system in vehicles. Through analysis of Hitag2's stream cipher, the authors uncovered several critical weaknesses that enable attackers to extract secret keys and bypass authentication. These vulnerabilities include a weak 48-bit key vulnerable to brute-force attacks, the absence of a proper random number generator that leaves the system susceptible to replay attacks, and predictable key derivation that allows exploitation of session dependencies. \n The researchers successfully implemented three distinct attacks against Hitag2. \n\t The Malleability Attack involves replaying authentication attempts to the key fob and extracting keystream bits to recover memory contents, including passwords and keys, completing in less than one second. \n\tThe Time/Memory Tradeoff Attack utilizes a precomputed lookup table (1.2 TB) of potential keys. By eavesdropping on authentication attempts and collecting 256 bytes of keystream, attackers can match this data against the table to recover the secret key in approximately one minute. \n\t Finally, the Cryptanalytic Attack exploits vulnerabilities in Hitag2's stream cipher that leak key bits during multiple authentication attempts. By collecting 136 authentication traces, attackers can recover the key in under six minutes."
		},
		{
			"ID": "RE0034",
			"name": "CAN Injection: keyless car theft",
			"cite": "CAN Injection: keyless car theft | Dr. Ken Tindell. (n.d.). Retrieved March 23, 2025. [Online]",
			"link": "https://kentindell.github.io/2023/04/03/can-injection/",
			"description": "This article explores a sophisticated theft method that exploits vulnerabilities in modern vehicles' Controller Area Network (CAN) bus system. Thieves begin by accessing the vehicle's headlight assembly to reach CAN bus wiring. They then connect a ``CAN Injecto``, a rogue device to these exposed wires to inject malicious messages into the vehicle's internal network. The device mimics a legitimate smart key's digital communication, tricking the vehicle into unlocking and starting without the actual key fob. \n The CAN Injector works by transmitting counterfeit messages that the vehicle interprets as coming from an authorized key. This exploit takes advantage of the CAN protocol's lack of authentication mechanisms for message verification. As a result, the vehicle accepts these fraudulent commands, giving the attacker unauthorized control."
		},
		{
			"ID": "RE0035",
			"name": "Plug-n-pwned: comprehensive vulnerability analysis of obd-ii dongles as a new over-the-air attack surface in automotive iot",
			"cite": "H. Wen, Q. A. Chen, Z. Lin, Plug-n-pwned: comprehensive vulnerability analysis of obd-ii dongles as a new over-the-air attack surface in automotive iot, in: Proceedings of the 29th USENIX Conference on Security Symposium, SEC’20, USENIX Association, USA, 2020",
			"link": "https://dl.acm.org/doi/10.5555/3489212.3489266",
			"description": "This article explores a sophisticated theft method that exploits vulnerabilities in modern vehicles' Controller Area Network (CAN) bus system. Thieves begin by accessing the vehicle's headlight assembly to reach CAN bus wiring. They then connect a ``CAN Injecto``, a rogue device to these exposed wires to inject malicious messages into the vehicle's internal network. The device mimics a legitimate smart key's digital communication, tricking the vehicle into unlocking and starting without the actual key fob. \n The CAN Injector works by transmitting counterfeit messages that the vehicle interprets as coming from an authorized key. This exploit takes advantage of the CAN protocol's lack of authentication mechanisms for message verification. As a result, the vehicle accepts these fraudulent commands, giving the attacker unauthorized control."
		},
		{
			"ID": "RE0036",
			"name": "Robotics cyber security: vulnerabilities, attacks, countermeasures, and recommendations",
			"cite": "J. P. A. Yaacoub, H. N. Noura, O. Salman, and A. Chehab, “Robotics cyber security: vulnerabilities, attacks, countermeasures, and recommendations,” Int. J. Inf. Secur., vol. 21, no. 1, pp. 115–158, 2022, doi: 10.1007/s10207-021-00545-8.",
			"link": "https://doi.org/10.1007/s10207-021-00545-8",
			"description": "The paper provides a comprehensive overview of cybersecurity in robotics, identifying key vulnerabilities, attack vectors, and real-world threats affecting robotic systems. It categorises attacks by layers, include hardware (Trojans, physical tampering), firmware (Malware, ransomware, buffer overflows),and communication (MiTM, DoS, replay, spoofing, jamming), assesses their risks, and presents countermeasures and design recommendations.\n The paper reviews the wide deployment of robots in sectors, including Industrial (automation, construction), Medical (telemedicine, robotic surgeries), Agriculture (crop monitoring), Disaster and Rescue, Police and Military (combat drones, bomb disposal) and Pandemic Response (e.g., COVID-19 delivery and enforcement drones). \n They also points out some key security issuses, include insecure communication protocols, lack of authentication and encryption, vulnerable firmware and operating systems, absence of intrusion detection and penetration testing and lack of security-by-design practices. They also shows that robots are vulnerable at multiple levels, such as network vulnerabilities (replay, sniffing, jamming), platform vulnerabilities (outdated firmware/software), application vulnerabilities (malicious apps, weak passwords), and threat actors range from insiders and cybercriminals to terrorists and state-sponsored hackers."
		},
		{
			"ID": "RE0037",
			"name": "Web Hackers vs. The Auto Industry",
			"cite": "Web Hackers vs. The Auto Industry: Critical Vulnerabilities in Ferrari, BMW, Rolls Royce, Porsche, and More. (n.d.). Retrieved March 24, 2025, [Online]",
			"link": "https://samcurry.net/web-hackers-vs-the-auto-industry",
			"description": "This article provides a detailed and revealing critical vulnerabilities across numerous major automotive brands(BMW, Rolls Royce, Ferrari, Hyundai, Honda, Nissan, Kia, Mercedes-Benz) and telematics service providers (Spireon and Reviver). Their work focused primarily on API flaws, Single Sign-On (SSO) misconfigurations, insecure backend infrastructures, and weak access control mechanisms. \n For example, vulnerabilities in BMW and Rolls Royce's SSO systems allowed attackers to impersonate any employee, gaining access to internal dealer portals and retrieving sensitive documents. Mercedes-Benz’s SSO was similarly flawed, giving access to hundreds of internal tools, from Jenkins servers to cloud deployment dashboards, some of which were vulnerable to remote code execution. Ferrari’s systems lacked basic access controls, allowing attackers to take over user accounts, manipulate administrator permissions, and manage content on Ferrari’s websites. \n Specially, the researchers found they could send commands (like unlocking or disabling starters), track vehicle locations, update firmware, and access PII.  Similarly, Reviver’s digital license plate system was found to be fully accessible by attackers, enabling tracking and administrative control over customer vehicles, including marking them as “stolen.” \n Other vulnerabilities included Hyundai, Honda, and Nissan APIs that allowed full remote control of vehicle functions and account takeover using only email addresses or VINs. In Toyota’s case, production APIs exposed user data due to lack of authentication. Also, SiriusXM was affected, with AWS keys leaked that exposed internal databases and configuration files."
		},
		{
			"ID": "RE0038",
			"name": "How I got access to 25+ Tesla’s around the world",
			"cite": "How I got access to 25+ Tesla’s around the world. By accident. And curiosity. | by David Colombo | Medium. (n.d.). Retrieved March 24, 2025, from [Online]",
			"link": "https://medium.com/@david_colombo/how-i-got-access-to-25-teslas-around-the-world-by-accident-and-curiosity-8b9ef040a028",
			"description": "This article show how the reseacher gained remote access to over 25 Tesla vehicles around the world through a third-party system misconfiguration. The vulnerability lie in insecure deployments of a third-party open-source tool called TeslaMate, which users self-host to log and visualise vehicle data. The author found instances of TeslaMate exposed online, often without proper authentication. Once accessed, these dashboards revealed Tesla API tokens—authentication credentials for Tesla’s backend services. These tokens could be used with Tesla’s official API to issue remote commands to vehicles as if they came from the legitimate owner. \n He was able to locate these insecure dashboards through basic internet scans and subdomain enumeration. In many cases, the tokens were stored unencrypted and accessible through default or misconfigured Grafana dashboards bundled with TeslaMate installations. He could found over 25 similar cases across 13 countries. \n This access allowed him to perform remote commands such as disabling Sentry Mode, unlocking doors, opening windows, and initiating Keyless Driving.  However, the author clarified he did not have control over critical driving systems such as braking or steering."
		},
		{
			"ID": "RE0039",
			"name": "Advancing Vulnerability Discovery Amid Automotive Innovation: An API Attack From Halfway Across the World",
			"cite": "Advancing Vulnerability Discovery Amid Automotive Innovation: An API Attack From Halfway Across the World - VicOne. (n.d.). Retrieved March 24, 2025, from [Online]",
			"link": "https://vicone.com/blog/advancing-vulnerability-discovery-amid-automotive-innovation-an-api-attack-from-halfway-across-the-world",
			"description": "This article demonstrated an API-based remote attack scenario against a connected vehicle as part of the Pwn2Own Automotive 2024 even. It highlights how the increasing integration of connectivity into modern vehicles, such as SIM-enabled telematics and remote APIs expands the potential attack surface for adversaries. \n In the demonstrated scenario, researchers obtained valid credentials via simulating a phishing or ransomware-based compromise for a vehicle located across the globe. Using these credentials, they remotely interacted with the vehicle’s backend API, sending commands such as retrieving door status or starting the car. These actions demonstrated that geographical distance is no barrier when weak authentication and insufficient monitoring exist."
		},
		{
			"ID": "RE0040",
			"name": "Insecure Toyota CRM exposed Mexican customer information.",
			"cite": "Insecure Toyota CRM exposed Mexican customer information. (n.d.). Retrieved March 24, 2025, from [Online]",
			"link": "https://eaton-works.com/2023/03/06/toyota-c360-hack/",
			"description": "This article discovered serious flaws in Toyota’s Customer 360 (C360) CRM system, used to manage customer data in Mexico. By modifying the JavaScript code of the development version of the CRM’s Angular-based frontend, the researcher bypassed login requirements and redirected the application to use Toyota’s production API, which was exposed within the dev app due to a loading library configuration. Critically, the production API required no authentication, allowing any user with the correct endpoint and request format to retrieve real customer information. \n Exploited data included customers' full names, phone numbers, email addresses, physical addresses, tax IDs, and vehicle service and ownership histories. Although the production site itself was access-restricted, the dev app’s source code included the production API paths, making it possible to query sensitive production data without proper credentials."
		},
		{
			"ID": "RE0041",
			"name": "Adventures in Automotive Networks and Control Units",
			"cite": "C. Valasek and C. Miller, “Adventures in Automotive Networks and Control Units,” Tech. White Pap., p. 99, 2013, [Online].",
			"link": "http://www.ioactive.com/pdfs/IOActive_Adventures_in_Automotive_Networks_and_Control_Units.pdf",
			"description": "This paper explores post-exploitation attack vectors in modern vehicles, including a 2010 Ford Escape and a 2010 Toyota Prius by leveraging CAN message injection. After gaining code execution on an ECU, the authors demonstrate how adversaries can inject CAN messages, both normal and diagnostic to manipulate vehicle functions like braking, steering, acceleration, speedometer, and seat belts. They reverse-engineer diagnostic services based on ISO 14229 (UDS) and ISO-TP and show how these services can be exploited to control ECUs directly via the OBD-II port using tools like EcomCat and Techstream. The study includes firmware reprogramming, SecurityAccess bypass, and manipulation of services such as DiagnosticSessionControl, RoutineControl, and WriteMemoryByAddress."
		},
		{
			"ID": "RE0042",
			"name": "Supply Chain Compromise",
			"cite": "ATT&CK Supply Chain Compromise, Retrieved March 27, 2025. [Online].",
			"link": "https://attack.mitre.org/techniques/T1195/",
			"description": "This link describes the Supply Chain Compromise technique in the Enterprise domain of the ATT&CK database."
		},
		{
			"ID": "RE0043",
			"name": "There Will Be Glitches Extracting and Analyzing Automotive Firmware Efficiently",
			"cite": "N. Timmers, “There Will Be Glitches Extracting and Analyzing Automotive Firmware Efficiently,” BlackHat, pp. 1–7, 2018.",
			"link": "https://raelize.com/upload/research/2018/2018_escareu_There-Will-Be-Glitches-Whitepaper.pdf",
			"description": "This paper demonstrates how hardware fault injection attacks can be used to extract and analyse automotive firmware. The authors use an instrument cluster ECU as their target and focus on extracting firmware and learning how the ECU behaves internally. They demonstrate Voltage Fault Injection to successfully extract firmware from the target. Once firmware was obtained, they built a custom emulator to efficiently reverse-engineer the firmware outside of the vehicle hardware. Through dynamic analysis like taint tracking, execution tracing, and CAN fuzzing, they identify security mechanisms and even extract ECU secrets like keys."
		},
		{
			"ID": "RE0044",
			"name": "The Car Hacker ’ s Handbook",
			"cite": "C. Smith, N. Starch, and P. Isbn, The Car Hacker ’ s Handbook, no. April. 2016.",
			"link": "https://www.amazon.com/Car-Hackers-Handbook-Penetration-Tester/dp/1593277032",
			"description": "The book provides a comprehensive guide to automotive penetration testing. The authors introduce core vehicle components and protocols like CAN, LIN, and OBD-II, along with tools and techniques for reverse engineering CAN traffic. It details how to sniff CAN messages using tools like can-utils, interpret message IDs, and identify control functions by monitoring changes during vehicle interaction (e.g., pressing pedals, toggling switches). \n The book also explores attack surfaces including diagnostic functions, telematics units, infotainment systems, and firmware updates. It covers wireless and physical access methods, ECU reprogramming, and building low-cost test benches."
		},
		{
			"ID": "RE0045",
			"name": "On the road with third-party apps: Security analysis of an in-vehicle app platform",
			"cite": "B. Eriksson, J. Groth, and A. Sabelfeld, “On the road with third-party apps: Security analysis of an in-vehicle app platform,” VEHITS 2019 - Proc. 5th Int. Conf. Veh. Technol. Intell. Transp. Syst., no. Vehits, pp. 64–75, 2019, doi: 10.5220/0007678200640075.",
			"link": "https://doi.org/10.5220/0007678200640075",
			"description": "This paper explores the security of enabling third-party applications in modern vehicles. It focuses on Android Automotive, an emerging platform integrated directly into vehicles rather than running on connected smartphones. The authors perform a systematic security analysis of the Android Automotive OS, using a real-world case study of Volvo's Android-based infotainment system. \n The paper outlines three main attack categories: \n\t (1) Disturbance attacks: These include SoundBlast and Media Hijack. SoundBlast uses AudioManager to play loud or repeated audio that may distract the driver. Media Hijack interrupts other apps' media playback by manipulating the media session. \n\t (2) Denial-of-Service attacks: These include Fork Bomb and Service Disruption. Fork Bomb creates excessive processes to crash system components, while Service Disruption crashes media apps like Spotify by abusing their APIs. \n\t (3) Exfiltration attacks (Privacy): These include Audio Recording + Upload and No-INTERNET-Exfiltration. Audio Recording + Upload records audio and exfiltrates it using an implicit intent to another app that has Internet permission. No-INTERNET-Exfiltration bypasses permission control by leveraging system apps to leak sensitive data like audio recordings or location. \n The authors analyze how Android Automotive exposes functionality through undocumented or poorly protected APIs. They demonstrate that sensitive operations often lack permission checks, APIs like AudioManager are overly permissive, and app interactions via Intents can be abused for lateral functionality. They also introduce AutoTame, a tool that analyzes apps for misuse of platform APIs and unsafe behaviors. The tool employs FlowDroid and Amandroid for taint analysis, identifying information flows from sensitive sources (like microphones) to potential exfiltration sinks."
		},
		{
			"ID": "RE0046",
			"name": "CAN Message Injection",
			"cite": "C. Miller and C. Valasek, “CAN Message Injection,” pp. 1–29, 2016, [Online].",
			"link": "http://illmatics.com/can%20message%20injection.pdf",
			"description": "This paper presents a detailed investigation into CAN message injection attacks using real-world vehicles. The researchers demonstrate how to inject crafted CAN messages from a compromised ECU to control target ECUs. Rather than fully reverse-engineering messages, they record normal CAN traffic (such as while pressing brakes) and replay those messages to replicate the action. They emphasize that the timing and frequency of messages are critical to overriding legitimate ones. The researchers show that malicious reprogramming of certain ECUs (such as the Parking Assist Module) enables persistent control. They also explore how gateway ECUs and bus segmentation affect an attacker's ability to move laterally or inject messages across networks. Their demonstrations include unlocking doors, applying brakes, changing gear positions, and disabling ABS through message injection. The attacks also encompass injecting messages from the telematics unit or compromised head unit to critical ECUs, as well as achieving persistent compromise through firmware reflashing."
		},
		{
			"ID": "RE0047",
			"name": "Worm Epidemics in Vehicular Networks",
			"cite": "O. Trullols-Cruces, M. Fiore, and J. M. Barcelo-Ordinas, “Worm Epidemics in Vehicular Networks,” IEEE Trans. Mob. Comput., vol. 14, no. 10, pp. 2173–2187, 2015, doi: 10.1109/TMC.2014.2375822.",
			"link": "http://doi.org/10.1109/TMC.2014.2375822",
			"description": "This paper introduces the risk of mobile worm epidemics in vehicular networks. Unlike traditional computer worms that scan IP addresses, vehicular worms leverage vehicle mobility to discover nearby targets. The authors examine two propagation modes: broadcast carriers, which infect all nearby vehicles simultaneously, and unicast carriers, which infect one target at a time. Using real traffic data—including vehicle speed, inter-arrival time, communication range, and penetration rate—the authors develop a numerical model to estimate worm propagation speed. Their results show that even with a minimal penetration rate of 1%, a relatively fast worm (1-second propagation latency) can infect most connected vehicles in a region like Zurich within minutes. The location of initial infection proves crucial to spread speed, with outbreaks starting in high-traffic areas achieving faster and wider propagation."
		},
		{
			"ID": "RE0048",
			"name": "A Stealth, Selective, Link-Layer Denial-of-Service Attack Against Automotive Networks",
			"cite": "Lingguang Lei et al., “A Stealth, Selective, Link-Layer Denial-of-Service Attack Against Automotive Networks,” Int. Conf. Detect. Intrusions Malware, Vulnerability Assessment., vol. 1, pp. 185–206, 2017, doi: 10.1007/978-3-319-60876-1.",
			"link": "http://doi.org/10.1007/978-3-319-60876-1",
			"description": "This paper introduces a stealthy denial-of-service (DoS) attack on automotive CAN networks that operates below the frame level, making it invisible to frame-based IDS/IPS. The attack exploits two CAN protocol weaknesses: bit error detection (where a bit error occurs if a node sends a bit but reads back a different value) and fault confinement (where every CAN node tracks its own Transmit Error Count—TEC). Each bit error increases the TEC by 8, and if TEC exceeds 255, the node enters Bus-Off state and stops transmitting and receiving. \n To implement the attack, which requires no complete frame transmission, the researchers used an Arduino Uno with MCP2551 transceiver connected to the OBD-II port. The microcontroller connects to RXD (Receive Data) to read the current bus state and TXD (Transmit Data) to inject dominant bits. The attack proceeds in two steps: First, they capture normal traffic using a CAN sniffer to identify the target ECU's CAN ID. Second, when the target ECU begins transmitting, they monitor bits in real time and inject a dominant bit (0) whenever they detect a recessive bit (1), causing a bit error for the sender. \n The researchers tested their method on a 2012 Alfa Romeo Giulietta's CAN-B and CAN-C buses. After 32 bit errors (raising TEC to 256), they successfully forced the parking sensor ECU into bus-off state with 32 malformed transmissions. The DoS attack achieved 99.9974% accuracy over 24 hours, resulting in complete denial of sensor functionality. Notably, current frame-based IDS/IPS systems prove ineffective at detecting this type of attack."
		},
		{
			"ID": "RE0049",
			"name": "Spoofing attack using bus-off attacks against a specific ECU of the CAN bus",
			"cite": "K. Iehira, H. Inoue, and K. Ishida, “Spoofing attack using bus-off attacks against a specific ECU of the CAN bus,” CCNC 2018 - 2018 15th IEEE Annu. Consum. Commun. Netw. Conf., vol. 2018-January, pp. 1–4, 2018, doi: 10.1109/CCNC.2018.8319180.",
			"link": "http://doi.org/10.1109/CCNC.2018.8319180",
			"description": "This paper presents a novel spoofing attack technique that exploits the error-handling mechanism of the CAN protocol to force a specific ECU into a bus-off state. Unlike conventional spoofing attacks, which often result in conflicts between legitimate and injected messages, the proposed approach first disables the legitimate ECU and then injects spoofed messages, allowing for full impersonation without interference or detection. This attack exploits two vulnerabilities in the CAN bus: the lack of authentication or encryption (allowing any ECU to inject frames) and the reliance on simple error counters like the Transmit Error Counter (TEC). When a node accumulates more than 255 transmission errors, it enters a bus-off state and can no longer participate in communication. \n While spoofing CAN messages is typically detectable through message timing or content checks, this attack circumvents detection by first silencing the legitimate ECU through bus-off, then spoofing without conflict. The authors demonstrate three methods to trigger the bus-off state: (1) bit error injection, (2) stuff error injection, and (3) dominant bit-holding. In the first method, the attacker synchronizes with the target ECU by monitoring the CAN bus and sending a conflicting dominant bit when the target transmits a recessive bit, causing a bit error that increments the TEC by 8. After 32 repetitions, the ECU enters bus-off state. The second method sends error frames immediately after target ECU messages, which the target recognizes as bit errors. The third and most effective method holds a dominant bit (0) long enough to rapidly increase the TEC, forcing bus-off in a single attempt. \n Once the target ECU is disabled, the attacker injects spoofed messages using the same CAN ID, rate, and format as the original. With the legitimate ECU silenced, there are no conflicts or anomalies for the receiver ECU to detect. \n The authors validated this attack using an FPGA-based prototype in both laboratory conditions and on a 2013 hybrid vehicle. In their demonstration, they successfully spoofed the engine RPM signal, making the tachometer display 6000 RPM while the vehicle was stationary and idling. The vehicle's systems accepted these spoofed messages without detecting any anomalies."
		},
		{
			"ID": "RE0050",
			"name": "WeepingCAN: A Stealthy CAN Bus-off Attack",
			"cite": "G. Bloom, “WeepingCAN: A Stealthy CAN Bus-off Attack,” no. February, 2021, doi: 10.14722/autosec.2021.23002.",
			"link": "http://doi.org/10.14722/autosec.2021.23002",
			"description": "This paper introduces a denial-of-service attack on the CAN that stealthily forces a victim ECU into a bus-off state. In the traditional bus-off attack, an attacker sends a crafted CAN frame that mirrors the target ECU's message but flips a specific bit—typically a dominant bit (0) to cause a bit error. This error is repeated over multiple retransmissions until both ECUs increase their transmit error counter (TEC) enough to enter error passive, and eventually, the victim alone continues into bus-off. \n However, this paper improves upon this approach by introducing several key changes to increase stealth. \n\t First, it disables retransmission of attack messages. Normally, when a CAN message fails to send, the device repeatedly attempts retransmission, which appears suspicious. Disabling retransmission prevents this easily detectable pattern. \n\t Second, it implements recessive injection: instead of injecting a dominant bit where the victim is sending a recessive, the authors do the opposite—sending a recessive bit (1) while the victim sends a dominant (0). This triggers a bit error and an active error flag, increasing both the attacker's and victim's TECs by 8, while appearing less suspicious. \n\t Third, it maintains attacker health through skip injection: injecting additional messages to help its own TEC recover, ensuring it doesn't reach bus-off before the victim. \n\t Finally, it randomizes the bit position where the error occurs to prevent pattern-based detection. Rather than injecting errors at the same spot in the message, which could reveal a pattern to defenders, it randomly selects a bit position within the message (such as in the data field). \n The authors tested their method in both a lab environment and on a real 2016 Kia Optima. The attack succeeded in over 75% of attempts. System logs confirmed that the victim ECU ceased transmission entirely (indicating bus-off), while the attack remained undetected."
		}
		
    ]
}